using System.ComponentModel;
using System.ServiceModel;
using System.ServiceModel.Description;
using m.transport.Domain;
using m.transport.ServiceInterface;

namespace m.transport.Svc
{
	public interface ITransportServiceClient
	{
		event System.EventHandler<VersionCompletedEventArgs> VersionCompleted;
		event System.EventHandler<ConnectedCompletedEventArgs> ConnectedCompleted;
		event System.EventHandler<ServerTimeCompletedEventArgs> ServerTimeCompleted;
		event System.EventHandler<LoginCompletedEventArgs> LoginCompleted;
		event System.EventHandler<GetMileageDetailsCompletedEventArgs> GetMileageDetailsCompleted;
		event System.EventHandler<AsyncCompletedEventArgs> UpdateTruckCompleted;
		event System.EventHandler<AsyncCompletedEventArgs> UpdateOdometerCompleted;
		event System.EventHandler<GetDriverIDCompletedEventArgs> GetDriverIDCompleted;
		event System.EventHandler<GetRunListCompletedEventArgs> GetRunListCompleted;
		event System.EventHandler<GetRunDetailCompletedEventArgs> GetRunDetailCompleted;
		event System.EventHandler<GetDamageCodeListCompletedEventArgs> GetDamageCodeListCompleted;
		event System.EventHandler<GetCodesCompletedEventArgs> GetCodesCompleted;
		event System.EventHandler<refreshDamageAreaAndcodeCompletedEventArgs> refreshDamageAreaAndcodeCompleted;
		event System.EventHandler<GetExpenseTypeListCompletedEventArgs> GetExpenseTypeListCompleted;
		event System.EventHandler<GetReasonListCompletedEventArgs> GetReasonListCompleted;
		event System.EventHandler<GetUnpaidExpenseListCompletedEventArgs> GetUnpaidExpenseListCompleted;
		event System.EventHandler<SendExpenseCompletedEventArgs> SendExpenseCompleted;
		event System.EventHandler<SendExceptionResponseCompletedEventArgs> SendExceptionResponseCompleted;
		event System.EventHandler<VerifyVINCompletedEventArgs> VerifyVINCompleted;
		event System.EventHandler<AsyncCompletedEventArgs> SendDriverSignatureCompleted;
		event System.EventHandler<GetDriverSignatureCompletedEventArgs> GetDriverSignatureCompleted;
		event System.EventHandler<GetLatestReleaseVersionCompletedEventArgs> GetLatestReleaseVersionCompleted;
		event System.EventHandler<DownloadReleaseCompletedEventArgs> DownloadReleaseCompleted;
		event System.EventHandler<GetCurrentLoadCompletedEventArgs> GetCurrentLoadCompleted;
		event System.EventHandler<AsyncCompletedEventArgs> UploadCurrentLoadCompleted;
		event System.EventHandler<AsyncCompletedEventArgs> ResetUserCompleted;
		event System.EventHandler<GetMobileSettingsCompletedEventArgs> GetMobileSettingsCompleted;
		event System.EventHandler<AsyncCompletedEventArgs> OpenCompleted;
		event System.EventHandler<AsyncCompletedEventArgs> CloseCompleted;
		event System.EventHandler<AsyncCompletedEventArgs> SendDamagePhotosCompleted;
		event System.EventHandler<AsyncCompletedEventArgs> LogMobileDeviceCompleted;
		void VersionAsync();
		void VersionAsync(object userState);
		void ConnectedAsync();
		void ConnectedAsync(object userState);
		void ServerTimeAsync();
		void ServerTimeAsync(object userState);
		void LoginAsync(string pDriver, string pPassword, string pTruck);
		void LoginAsync(string pDriver, string pPassword, string pTruck, object userState);
		void GetMileageDetailsAsync(string pNewTruck);
		void GetMileageDetailsAsync(string pNewTruck, object userState);
		void UpdateTruckAsync(string pDriver, string pPassword, string pTruck, string pNewTruck);
		void UpdateTruckAsync(string pDriver, string pPassword, string pTruck, string pNewTruck, object userState);
		void UpdateOdometerAsync(string pDriver, string pPassword, string pTruck, string pOdometer);
		void UpdateOdometerAsync(string pDriver, string pPassword, string pTruck, string pOdometer, object userState);
		void GetDriverIDAsync(string pDriver, string pPassword, string pTruck);
		void GetDriverIDAsync(string pDriver, string pPassword, string pTruck, object userState);
		void GetRunListAsync(string pDriver, string pPassword, string pTruck);
		void GetRunListAsync(string pDriver, string pPassword, string pTruck, object userState);
		void GetRunDetailAsync(string pDriver, string pPassword, string pTruck, string pRunID);
		void GetRunDetailAsync(string pDriver, string pPassword, string pTruck, string pRunID, object userState);
		void GetDamageCodeListAsync(string pDriver, string pPassword, string pTruck, string pHandheldID);
		void GetDamageCodeListAsync(string pDriver, string pPassword, string pTruck, string pHandheldID, object userState);
		void GetCodesAsync(string pDriver, string pPassword, string pTruck, string codeTypes);
		void GetCodesAsync(string pDriver, string pPassword, string pTruck, string codeTypes, object userState);
		void refreshDamageAreaAndcodeAsync(string pDriver, string pPassword, string pTruck, System.DateTime pDamageTypeAndLocationSyncDate);
		void refreshDamageAreaAndcodeAsync(string pDriver, string pPassword, string pTruck, System.DateTime pDamageTypeAndLocationSyncDate, object userState);
		void GetExpenseTypeListAsync(string pDriver, string pPassword, string pTruck, string pHandheldID);
		void GetExpenseTypeListAsync(string pDriver, string pPassword, string pTruck, string pHandheldID, object userState);
		void GetReasonListAsync(string pDriver, string pPassword, string pTruck, string pHandheldID);
		void GetReasonListAsync(string pDriver, string pPassword, string pTruck, string pHandheldID, object userState);
		void GetUnpaidExpenseListAsync(string pDriver, string pPassword, string pTruck);
		void GetUnpaidExpenseListAsync(string pDriver, string pPassword, string pTruck, object userState);
		void SendExpenseAsync(string pDriver, string pPassword, string pTruck, m.transport.Domain.Expense expense);
		void SendExpenseAsync(string pDriver, string pPassword, string pTruck, m.transport.Domain.Expense expense, object userState);
		void SendExceptionResponseAsync(string pDriver, string pPassword, string pTruck, m.transport.Svc.ArrayOfXElement pExceptionResponse);
		void SendExceptionResponseAsync(string pDriver, string pPassword, string pTruck, m.transport.Svc.ArrayOfXElement pExceptionResponse, object userState);
		void VerifyVINAsync(string pDriver, string pPassword, string pTruck, string pVIN);
		void VerifyVINAsync(string pDriver, string pPassword, string pTruck, string pVIN, object userState);
		void SendDriverSignatureAsync(string pDriver, string pPassword, string pTruck, DeliverySignature signature);
		void SendDriverSignatureAsync(string pDriver, string pPassword, string pTruck, DeliverySignature signature, object userState);
		void GetDriverSignatureAsync(string pDriver, string pPassword, string pTruck);
		void GetDriverSignatureAsync(string pDriver, string pPassword, string pTruck, object userState);
		void GetLatestReleaseVersionAsync(string appVersion, string inspectorCode, string inspectorName, string handHeldID, string localTime, string localTimeZone);
		void GetLatestReleaseVersionAsync(string appVersion, string inspectorCode, string inspectorName, string handHeldID, string localTime, string localTimeZone, object userState);
		void DownloadReleaseAsync(string appVersion, string inspectorCode, string inspectorName, string handHeldID, string localTime, string localTimeZone, string version, int currentPosition, int chunckSize);
		void DownloadReleaseAsync(string appVersion, string inspectorCode, string inspectorName, string handHeldID, string localTime, string localTimeZone, string version, int currentPosition, int chunckSize, object userState);
		void GetCurrentLoadAsync(string pDriver, string pPassword, string pTruck, bool clearExceptions, string returnLoad);
		void GetCurrentLoadAsync(string pDriver, string pPassword, string pTruck, bool clearExceptions, string returnLoad, object userState);
		void UploadCurrentLoadAsync(string pDriver, string pPassword, string pTruck, CurrentLoadUpdate pCurrentLoad);
		void UploadCurrentLoadAsync(string pDriver, string pPassword, string pTruck, CurrentLoadUpdate pCurrentLoad, object userState);
		void ResetUserAsync(string pDriver, string pPassword);
		void ResetUserAsync(string pDriver, string pPassword, object userState);
		void GetMobileSettingsAsync();
		void GetMobileSettingsAsync(object userState);
		void OpenAsync();
		void OpenAsync(object userState);
		void CloseAsync();
		void CloseAsync(object userState);
		void Abort();
		void SendDamagePhotosAsync (string pDriver, string pPassword, string pTruck, DamagePhoto[] photos);
		void SendDamagePhotosAsync (string pDriver, string pPassword, string pTruck, DamagePhoto[] photos, object userState);
		void LogMobileDeviceAsync (MobileDevice device);
		void LogMobileDeviceAsync (MobileDevice device, object userState);

	}
}