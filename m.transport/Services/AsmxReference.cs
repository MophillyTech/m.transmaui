//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by SlSvcUtil, version 5.0.61118.0
// 
namespace m.transport.Asmx
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.datacapturesolutions.net/", ConfigurationName="m.transport.Asmx.ServiceSoap")]
    public interface ServiceSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.datacapturesolutions.net/GetLatestReleaseVersion", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetLatestReleaseVersion(string appVersion, string inspectorCode, string inspectorName, string handHeldID, string localTime, string localTimeZone, System.AsyncCallback callback, object asyncState);
        
        string EndGetLatestReleaseVersion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.datacapturesolutions.net/DownloadRelease", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginDownloadRelease(string appVersion, string inspectorCode, string inspectorName, string handHeldID, string localTime, string localTimeZone, string version, int currentPosition, int chunckSize, System.AsyncCallback callback, object asyncState);
        
        m.transport.Asmx.DAIFileDetails EndDownloadRelease(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.datacapturesolutions.net/Version", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginVersion(System.AsyncCallback callback, object asyncState);
        
        string EndVersion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.datacapturesolutions.net/Connected", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginConnected(System.AsyncCallback callback, object asyncState);
        
        bool EndConnected(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.datacapturesolutions.net/ServerTime", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginServerTime(System.AsyncCallback callback, object asyncState);
        
        string EndServerTime(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.datacapturesolutions.net/Login", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginLogin(string pDriver, string pPassword, string pTruck, System.AsyncCallback callback, object asyncState);
        
        m.transport.Asmx.ArrayOfXElement EndLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.datacapturesolutions.net/GetMileageDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetMileageDetails(string pNewTruck, System.AsyncCallback callback, object asyncState);
        
        m.transport.Asmx.ArrayOfXElement EndGetMileageDetails(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.datacapturesolutions.net/UpdateTruck", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginUpdateTruck(string pDriver, string pPassword, string pTruck, string pNewTruck, System.AsyncCallback callback, object asyncState);
        
        m.transport.Asmx.ArrayOfXElement EndUpdateTruck(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.datacapturesolutions.net/UpdateOdometer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginUpdateOdometer(string pDriver, string pPassword, string pTruck, string pOdometer, System.AsyncCallback callback, object asyncState);
        
        m.transport.Asmx.ArrayOfXElement EndUpdateOdometer(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.datacapturesolutions.net/GetDriverID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetDriverID(string pDriver, string pPassword, string pTruck, System.AsyncCallback callback, object asyncState);
        
        m.transport.Asmx.ArrayOfXElement EndGetDriverID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.datacapturesolutions.net/CurrentLoad", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginCurrentLoad(string pDriver, string pPassword, string pTruck, m.transport.Asmx.ArrayOfXElement pCurrentLoad, System.AsyncCallback callback, object asyncState);
        
        m.transport.Asmx.ArrayOfXElement EndCurrentLoad(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.datacapturesolutions.net/CurrentLoadEx", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginCurrentLoadEx(string pDriver, string pPassword, string pTruck, string pDriverID, m.transport.Asmx.ArrayOfXElement pCurrentLoad, System.AsyncCallback callback, object asyncState);
        
        m.transport.Asmx.ArrayOfXElement EndCurrentLoadEx(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.datacapturesolutions.net/GetRunList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetRunList(string pDriver, string pPassword, string pTruck, System.AsyncCallback callback, object asyncState);
        
        m.transport.Asmx.ArrayOfXElement EndGetRunList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.datacapturesolutions.net/GetRunDetail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetRunDetail(string pDriver, string pPassword, string pTruck, string pRunID, System.AsyncCallback callback, object asyncState);
        
        m.transport.Asmx.ArrayOfXElement EndGetRunDetail(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.datacapturesolutions.net/GetDamageCodeList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetDamageCodeList(string pDriver, string pPassword, string pTruck, string pHandheldID, System.AsyncCallback callback, object asyncState);
        
        m.transport.Asmx.ArrayOfXElement EndGetDamageCodeList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.datacapturesolutions.net/refreshDamageAreaAndcode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginrefreshDamageAreaAndcode(string pDriver, string pPassword, string pTruck, System.DateTime pDamageTypeAndLocationSyncDate, System.AsyncCallback callback, object asyncState);
        
        m.transport.Asmx.ArrayOfXElement EndrefreshDamageAreaAndcode(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.datacapturesolutions.net/GetExpenseTypeList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetExpenseTypeList(string pDriver, string pPassword, string pTruck, string pHandheldID, System.AsyncCallback callback, object asyncState);
        
        m.transport.Asmx.ArrayOfXElement EndGetExpenseTypeList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.datacapturesolutions.net/GetReasonList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetReasonList(string pDriver, string pPassword, string pTruck, string pHandheldID, System.AsyncCallback callback, object asyncState);
        
        m.transport.Asmx.ArrayOfXElement EndGetReasonList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.datacapturesolutions.net/GetUnpaidExpenseList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetUnpaidExpenseList(string pDriver, string pPassword, string pTruck, System.AsyncCallback callback, object asyncState);
        
        m.transport.Asmx.ArrayOfXElement EndGetUnpaidExpenseList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.datacapturesolutions.net/SendExpense", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginSendExpense(string pDriver, string pPassword, string pTruck, m.transport.Asmx.ArrayOfXElement pExpense, System.AsyncCallback callback, object asyncState);
        
        m.transport.Asmx.ArrayOfXElement EndSendExpense(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.datacapturesolutions.net/SendExceptionResponse", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginSendExceptionResponse(string pDriver, string pPassword, string pTruck, m.transport.Asmx.ArrayOfXElement pExceptionResponse, System.AsyncCallback callback, object asyncState);
        
        m.transport.Asmx.ArrayOfXElement EndSendExceptionResponse(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.datacapturesolutions.net/VerifyVIN", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginVerifyVIN(string pDriver, string pPassword, string pTruck, string pVIN, System.AsyncCallback callback, object asyncState);
        
        m.transport.Asmx.ArrayOfXElement EndVerifyVIN(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.datacapturesolutions.net/SendDriverSignature", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginSendDriverSignature(m.transport.Asmx.SendDriverSignatureRequest request, System.AsyncCallback callback, object asyncState);
        
        m.transport.Asmx.SendDriverSignatureResponse EndSendDriverSignature(System.IAsyncResult result);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("SlSvcUtil", "5.0.61118.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.datacapturesolutions.net/")]
    public partial class DAIFileDetails
    {
        
        private byte[] fileContentsField;
        
        private long fileSizeField;
        
        private string errorMessageField;
        
        private int bytesSentField;
        
        private string fileNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", Order=0)]
        public byte[] FileContents
        {
            get
            {
                return this.fileContentsField;
            }
            set
            {
                this.fileContentsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public long FileSize
        {
            get
            {
                return this.fileSizeField;
            }
            set
            {
                this.fileSizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string ErrorMessage
        {
            get
            {
                return this.errorMessageField;
            }
            set
            {
                this.errorMessageField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public int BytesSent
        {
            get
            {
                return this.bytesSentField;
            }
            set
            {
                this.bytesSentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string FileName
        {
            get
            {
                return this.fileNameField;
            }
            set
            {
                this.fileNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SendDriverSignature", WrapperNamespace="http://www.datacapturesolutions.net/", IsWrapped=true)]
    public partial class SendDriverSignatureRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.datacapturesolutions.net/", Order=0)]
        public string pDriver;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.datacapturesolutions.net/", Order=1)]
        public string pPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.datacapturesolutions.net/", Order=2)]
        public string pTruck;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.datacapturesolutions.net/", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] pSignatureData;
        
        public SendDriverSignatureRequest()
        {
        }
        
        public SendDriverSignatureRequest(string pDriver, string pPassword, string pTruck, byte[] pSignatureData)
        {
            this.pDriver = pDriver;
            this.pPassword = pPassword;
            this.pTruck = pTruck;
            this.pSignatureData = pSignatureData;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SendDriverSignatureResponse", WrapperNamespace="http://www.datacapturesolutions.net/", IsWrapped=true)]
    public partial class SendDriverSignatureResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.datacapturesolutions.net/", Order=0)]
        public m.transport.Asmx.ArrayOfXElement SendDriverSignatureResult;
        
        public SendDriverSignatureResponse()
        {
        }
        
        public SendDriverSignatureResponse(m.transport.Asmx.ArrayOfXElement SendDriverSignatureResult)
        {
            this.SendDriverSignatureResult = SendDriverSignatureResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ServiceSoapChannel : m.transport.Asmx.ServiceSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLatestReleaseVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public GetLatestReleaseVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public string Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DownloadReleaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public DownloadReleaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public m.transport.Asmx.DAIFileDetails Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((m.transport.Asmx.DAIFileDetails)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class VersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public VersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public string Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConnectedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public ConnectedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public bool Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServerTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public ServerTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public string Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public m.transport.Asmx.ArrayOfXElement Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((m.transport.Asmx.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMileageDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public GetMileageDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public m.transport.Asmx.ArrayOfXElement Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((m.transport.Asmx.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateTruckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public UpdateTruckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public m.transport.Asmx.ArrayOfXElement Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((m.transport.Asmx.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateOdometerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public UpdateOdometerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public m.transport.Asmx.ArrayOfXElement Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((m.transport.Asmx.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDriverIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public GetDriverIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public m.transport.Asmx.ArrayOfXElement Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((m.transport.Asmx.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CurrentLoadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public CurrentLoadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public m.transport.Asmx.ArrayOfXElement Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((m.transport.Asmx.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CurrentLoadExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public CurrentLoadExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public m.transport.Asmx.ArrayOfXElement Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((m.transport.Asmx.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRunListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public GetRunListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public m.transport.Asmx.ArrayOfXElement Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((m.transport.Asmx.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRunDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public GetRunDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public m.transport.Asmx.ArrayOfXElement Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((m.transport.Asmx.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDamageCodeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public GetDamageCodeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public m.transport.Asmx.ArrayOfXElement Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((m.transport.Asmx.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class refreshDamageAreaAndcodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public refreshDamageAreaAndcodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public m.transport.Asmx.ArrayOfXElement Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((m.transport.Asmx.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetExpenseTypeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public GetExpenseTypeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public m.transport.Asmx.ArrayOfXElement Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((m.transport.Asmx.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetReasonListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public GetReasonListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public m.transport.Asmx.ArrayOfXElement Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((m.transport.Asmx.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUnpaidExpenseListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public GetUnpaidExpenseListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public m.transport.Asmx.ArrayOfXElement Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((m.transport.Asmx.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendExpenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public SendExpenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public m.transport.Asmx.ArrayOfXElement Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((m.transport.Asmx.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendExceptionResponseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public SendExceptionResponseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public m.transport.Asmx.ArrayOfXElement Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((m.transport.Asmx.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class VerifyVINCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public VerifyVINCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public m.transport.Asmx.ArrayOfXElement Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((m.transport.Asmx.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendDriverSignatureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public SendDriverSignatureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public m.transport.Asmx.ArrayOfXElement Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((m.transport.Asmx.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceSoapClient : System.ServiceModel.ClientBase<m.transport.Asmx.ServiceSoap>, m.transport.Asmx.ServiceSoap
    {
        
        private BeginOperationDelegate onBeginGetLatestReleaseVersionDelegate;
        
        private EndOperationDelegate onEndGetLatestReleaseVersionDelegate;
        
        private System.Threading.SendOrPostCallback onGetLatestReleaseVersionCompletedDelegate;
        
        private BeginOperationDelegate onBeginDownloadReleaseDelegate;
        
        private EndOperationDelegate onEndDownloadReleaseDelegate;
        
        private System.Threading.SendOrPostCallback onDownloadReleaseCompletedDelegate;
        
        private BeginOperationDelegate onBeginVersionDelegate;
        
        private EndOperationDelegate onEndVersionDelegate;
        
        private System.Threading.SendOrPostCallback onVersionCompletedDelegate;
        
        private BeginOperationDelegate onBeginConnectedDelegate;
        
        private EndOperationDelegate onEndConnectedDelegate;
        
        private System.Threading.SendOrPostCallback onConnectedCompletedDelegate;
        
        private BeginOperationDelegate onBeginServerTimeDelegate;
        
        private EndOperationDelegate onEndServerTimeDelegate;
        
        private System.Threading.SendOrPostCallback onServerTimeCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoginDelegate;
        
        private EndOperationDelegate onEndLoginDelegate;
        
        private System.Threading.SendOrPostCallback onLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMileageDetailsDelegate;
        
        private EndOperationDelegate onEndGetMileageDetailsDelegate;
        
        private System.Threading.SendOrPostCallback onGetMileageDetailsCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateTruckDelegate;
        
        private EndOperationDelegate onEndUpdateTruckDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateTruckCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateOdometerDelegate;
        
        private EndOperationDelegate onEndUpdateOdometerDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateOdometerCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDriverIDDelegate;
        
        private EndOperationDelegate onEndGetDriverIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetDriverIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginCurrentLoadDelegate;
        
        private EndOperationDelegate onEndCurrentLoadDelegate;
        
        private System.Threading.SendOrPostCallback onCurrentLoadCompletedDelegate;
        
        private BeginOperationDelegate onBeginCurrentLoadExDelegate;
        
        private EndOperationDelegate onEndCurrentLoadExDelegate;
        
        private System.Threading.SendOrPostCallback onCurrentLoadExCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRunListDelegate;
        
        private EndOperationDelegate onEndGetRunListDelegate;
        
        private System.Threading.SendOrPostCallback onGetRunListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRunDetailDelegate;
        
        private EndOperationDelegate onEndGetRunDetailDelegate;
        
        private System.Threading.SendOrPostCallback onGetRunDetailCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDamageCodeListDelegate;
        
        private EndOperationDelegate onEndGetDamageCodeListDelegate;
        
        private System.Threading.SendOrPostCallback onGetDamageCodeListCompletedDelegate;
        
        private BeginOperationDelegate onBeginrefreshDamageAreaAndcodeDelegate;
        
        private EndOperationDelegate onEndrefreshDamageAreaAndcodeDelegate;
        
        private System.Threading.SendOrPostCallback onrefreshDamageAreaAndcodeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetExpenseTypeListDelegate;
        
        private EndOperationDelegate onEndGetExpenseTypeListDelegate;
        
        private System.Threading.SendOrPostCallback onGetExpenseTypeListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetReasonListDelegate;
        
        private EndOperationDelegate onEndGetReasonListDelegate;
        
        private System.Threading.SendOrPostCallback onGetReasonListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUnpaidExpenseListDelegate;
        
        private EndOperationDelegate onEndGetUnpaidExpenseListDelegate;
        
        private System.Threading.SendOrPostCallback onGetUnpaidExpenseListCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendExpenseDelegate;
        
        private EndOperationDelegate onEndSendExpenseDelegate;
        
        private System.Threading.SendOrPostCallback onSendExpenseCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendExceptionResponseDelegate;
        
        private EndOperationDelegate onEndSendExceptionResponseDelegate;
        
        private System.Threading.SendOrPostCallback onSendExceptionResponseCompletedDelegate;
        
        private BeginOperationDelegate onBeginVerifyVINDelegate;
        
        private EndOperationDelegate onEndVerifyVINDelegate;
        
        private System.Threading.SendOrPostCallback onVerifyVINCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendDriverSignatureDelegate;
        
        private EndOperationDelegate onEndSendDriverSignatureDelegate;
        
        private System.Threading.SendOrPostCallback onSendDriverSignatureCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ServiceSoapClient()
        {
        }
        
        public ServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName)
        {
        }
        
        public ServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public ServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public ServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Net.CookieContainer CookieContainer
        {
            get
            {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null))
                {
                    return httpCookieContainerManager.CookieContainer;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null))
                {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else
                {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetLatestReleaseVersionCompletedEventArgs> GetLatestReleaseVersionCompleted;
        
        public event System.EventHandler<DownloadReleaseCompletedEventArgs> DownloadReleaseCompleted;
        
        public event System.EventHandler<VersionCompletedEventArgs> VersionCompleted;
        
        public event System.EventHandler<ConnectedCompletedEventArgs> ConnectedCompleted;
        
        public event System.EventHandler<ServerTimeCompletedEventArgs> ServerTimeCompleted;
        
        public event System.EventHandler<LoginCompletedEventArgs> LoginCompleted;
        
        public event System.EventHandler<GetMileageDetailsCompletedEventArgs> GetMileageDetailsCompleted;
        
        public event System.EventHandler<UpdateTruckCompletedEventArgs> UpdateTruckCompleted;
        
        public event System.EventHandler<UpdateOdometerCompletedEventArgs> UpdateOdometerCompleted;
        
        public event System.EventHandler<GetDriverIDCompletedEventArgs> GetDriverIDCompleted;
        
        public event System.EventHandler<CurrentLoadCompletedEventArgs> CurrentLoadCompleted;
        
        public event System.EventHandler<CurrentLoadExCompletedEventArgs> CurrentLoadExCompleted;
        
        public event System.EventHandler<GetRunListCompletedEventArgs> GetRunListCompleted;
        
        public event System.EventHandler<GetRunDetailCompletedEventArgs> GetRunDetailCompleted;
        
        public event System.EventHandler<GetDamageCodeListCompletedEventArgs> GetDamageCodeListCompleted;
        
        public event System.EventHandler<refreshDamageAreaAndcodeCompletedEventArgs> refreshDamageAreaAndcodeCompleted;
        
        public event System.EventHandler<GetExpenseTypeListCompletedEventArgs> GetExpenseTypeListCompleted;
        
        public event System.EventHandler<GetReasonListCompletedEventArgs> GetReasonListCompleted;
        
        public event System.EventHandler<GetUnpaidExpenseListCompletedEventArgs> GetUnpaidExpenseListCompleted;
        
        public event System.EventHandler<SendExpenseCompletedEventArgs> SendExpenseCompleted;
        
        public event System.EventHandler<SendExceptionResponseCompletedEventArgs> SendExceptionResponseCompleted;
        
        public event System.EventHandler<VerifyVINCompletedEventArgs> VerifyVINCompleted;
        
        public event System.EventHandler<SendDriverSignatureCompletedEventArgs> SendDriverSignatureCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Asmx.ServiceSoap.BeginGetLatestReleaseVersion(string appVersion, string inspectorCode, string inspectorName, string handHeldID, string localTime, string localTimeZone, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetLatestReleaseVersion(appVersion, inspectorCode, inspectorName, handHeldID, localTime, localTimeZone, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string m.transport.Asmx.ServiceSoap.EndGetLatestReleaseVersion(System.IAsyncResult result)
        {
            return base.Channel.EndGetLatestReleaseVersion(result);
        }
        
        private System.IAsyncResult OnBeginGetLatestReleaseVersion(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string appVersion = ((string)(inValues[0]));
            string inspectorCode = ((string)(inValues[1]));
            string inspectorName = ((string)(inValues[2]));
            string handHeldID = ((string)(inValues[3]));
            string localTime = ((string)(inValues[4]));
            string localTimeZone = ((string)(inValues[5]));
            return ((m.transport.Asmx.ServiceSoap)(this)).BeginGetLatestReleaseVersion(appVersion, inspectorCode, inspectorName, handHeldID, localTime, localTimeZone, callback, asyncState);
        }
        
        private object[] OnEndGetLatestReleaseVersion(System.IAsyncResult result)
        {
            string retVal = ((m.transport.Asmx.ServiceSoap)(this)).EndGetLatestReleaseVersion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLatestReleaseVersionCompleted(object state)
        {
            if ((this.GetLatestReleaseVersionCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLatestReleaseVersionCompleted(this, new GetLatestReleaseVersionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLatestReleaseVersionAsync(string appVersion, string inspectorCode, string inspectorName, string handHeldID, string localTime, string localTimeZone)
        {
            this.GetLatestReleaseVersionAsync(appVersion, inspectorCode, inspectorName, handHeldID, localTime, localTimeZone, null);
        }
        
        public void GetLatestReleaseVersionAsync(string appVersion, string inspectorCode, string inspectorName, string handHeldID, string localTime, string localTimeZone, object userState)
        {
            if ((this.onBeginGetLatestReleaseVersionDelegate == null))
            {
                this.onBeginGetLatestReleaseVersionDelegate = new BeginOperationDelegate(this.OnBeginGetLatestReleaseVersion);
            }
            if ((this.onEndGetLatestReleaseVersionDelegate == null))
            {
                this.onEndGetLatestReleaseVersionDelegate = new EndOperationDelegate(this.OnEndGetLatestReleaseVersion);
            }
            if ((this.onGetLatestReleaseVersionCompletedDelegate == null))
            {
                this.onGetLatestReleaseVersionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLatestReleaseVersionCompleted);
            }
            base.InvokeAsync(this.onBeginGetLatestReleaseVersionDelegate, new object[] {
                        appVersion,
                        inspectorCode,
                        inspectorName,
                        handHeldID,
                        localTime,
                        localTimeZone}, this.onEndGetLatestReleaseVersionDelegate, this.onGetLatestReleaseVersionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Asmx.ServiceSoap.BeginDownloadRelease(string appVersion, string inspectorCode, string inspectorName, string handHeldID, string localTime, string localTimeZone, string version, int currentPosition, int chunckSize, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginDownloadRelease(appVersion, inspectorCode, inspectorName, handHeldID, localTime, localTimeZone, version, currentPosition, chunckSize, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        m.transport.Asmx.DAIFileDetails m.transport.Asmx.ServiceSoap.EndDownloadRelease(System.IAsyncResult result)
        {
            return base.Channel.EndDownloadRelease(result);
        }
        
        private System.IAsyncResult OnBeginDownloadRelease(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string appVersion = ((string)(inValues[0]));
            string inspectorCode = ((string)(inValues[1]));
            string inspectorName = ((string)(inValues[2]));
            string handHeldID = ((string)(inValues[3]));
            string localTime = ((string)(inValues[4]));
            string localTimeZone = ((string)(inValues[5]));
            string version = ((string)(inValues[6]));
            int currentPosition = ((int)(inValues[7]));
            int chunckSize = ((int)(inValues[8]));
            return ((m.transport.Asmx.ServiceSoap)(this)).BeginDownloadRelease(appVersion, inspectorCode, inspectorName, handHeldID, localTime, localTimeZone, version, currentPosition, chunckSize, callback, asyncState);
        }
        
        private object[] OnEndDownloadRelease(System.IAsyncResult result)
        {
            m.transport.Asmx.DAIFileDetails retVal = ((m.transport.Asmx.ServiceSoap)(this)).EndDownloadRelease(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDownloadReleaseCompleted(object state)
        {
            if ((this.DownloadReleaseCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DownloadReleaseCompleted(this, new DownloadReleaseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DownloadReleaseAsync(string appVersion, string inspectorCode, string inspectorName, string handHeldID, string localTime, string localTimeZone, string version, int currentPosition, int chunckSize)
        {
            this.DownloadReleaseAsync(appVersion, inspectorCode, inspectorName, handHeldID, localTime, localTimeZone, version, currentPosition, chunckSize, null);
        }
        
        public void DownloadReleaseAsync(string appVersion, string inspectorCode, string inspectorName, string handHeldID, string localTime, string localTimeZone, string version, int currentPosition, int chunckSize, object userState)
        {
            if ((this.onBeginDownloadReleaseDelegate == null))
            {
                this.onBeginDownloadReleaseDelegate = new BeginOperationDelegate(this.OnBeginDownloadRelease);
            }
            if ((this.onEndDownloadReleaseDelegate == null))
            {
                this.onEndDownloadReleaseDelegate = new EndOperationDelegate(this.OnEndDownloadRelease);
            }
            if ((this.onDownloadReleaseCompletedDelegate == null))
            {
                this.onDownloadReleaseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDownloadReleaseCompleted);
            }
            base.InvokeAsync(this.onBeginDownloadReleaseDelegate, new object[] {
                        appVersion,
                        inspectorCode,
                        inspectorName,
                        handHeldID,
                        localTime,
                        localTimeZone,
                        version,
                        currentPosition,
                        chunckSize}, this.onEndDownloadReleaseDelegate, this.onDownloadReleaseCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Asmx.ServiceSoap.BeginVersion(System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginVersion(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string m.transport.Asmx.ServiceSoap.EndVersion(System.IAsyncResult result)
        {
            return base.Channel.EndVersion(result);
        }
        
        private System.IAsyncResult OnBeginVersion(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            return ((m.transport.Asmx.ServiceSoap)(this)).BeginVersion(callback, asyncState);
        }
        
        private object[] OnEndVersion(System.IAsyncResult result)
        {
            string retVal = ((m.transport.Asmx.ServiceSoap)(this)).EndVersion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnVersionCompleted(object state)
        {
            if ((this.VersionCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.VersionCompleted(this, new VersionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void VersionAsync()
        {
            this.VersionAsync(null);
        }
        
        public void VersionAsync(object userState)
        {
            if ((this.onBeginVersionDelegate == null))
            {
                this.onBeginVersionDelegate = new BeginOperationDelegate(this.OnBeginVersion);
            }
            if ((this.onEndVersionDelegate == null))
            {
                this.onEndVersionDelegate = new EndOperationDelegate(this.OnEndVersion);
            }
            if ((this.onVersionCompletedDelegate == null))
            {
                this.onVersionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnVersionCompleted);
            }
            base.InvokeAsync(this.onBeginVersionDelegate, null, this.onEndVersionDelegate, this.onVersionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Asmx.ServiceSoap.BeginConnected(System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginConnected(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool m.transport.Asmx.ServiceSoap.EndConnected(System.IAsyncResult result)
        {
            return base.Channel.EndConnected(result);
        }
        
        private System.IAsyncResult OnBeginConnected(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            return ((m.transport.Asmx.ServiceSoap)(this)).BeginConnected(callback, asyncState);
        }
        
        private object[] OnEndConnected(System.IAsyncResult result)
        {
            bool retVal = ((m.transport.Asmx.ServiceSoap)(this)).EndConnected(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConnectedCompleted(object state)
        {
            if ((this.ConnectedCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConnectedCompleted(this, new ConnectedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConnectedAsync()
        {
            this.ConnectedAsync(null);
        }
        
        public void ConnectedAsync(object userState)
        {
            if ((this.onBeginConnectedDelegate == null))
            {
                this.onBeginConnectedDelegate = new BeginOperationDelegate(this.OnBeginConnected);
            }
            if ((this.onEndConnectedDelegate == null))
            {
                this.onEndConnectedDelegate = new EndOperationDelegate(this.OnEndConnected);
            }
            if ((this.onConnectedCompletedDelegate == null))
            {
                this.onConnectedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConnectedCompleted);
            }
            base.InvokeAsync(this.onBeginConnectedDelegate, null, this.onEndConnectedDelegate, this.onConnectedCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Asmx.ServiceSoap.BeginServerTime(System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginServerTime(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string m.transport.Asmx.ServiceSoap.EndServerTime(System.IAsyncResult result)
        {
            return base.Channel.EndServerTime(result);
        }
        
        private System.IAsyncResult OnBeginServerTime(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            return ((m.transport.Asmx.ServiceSoap)(this)).BeginServerTime(callback, asyncState);
        }
        
        private object[] OnEndServerTime(System.IAsyncResult result)
        {
            string retVal = ((m.transport.Asmx.ServiceSoap)(this)).EndServerTime(result);
            return new object[] {
                    retVal};
        }
        
        private void OnServerTimeCompleted(object state)
        {
            if ((this.ServerTimeCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ServerTimeCompleted(this, new ServerTimeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ServerTimeAsync()
        {
            this.ServerTimeAsync(null);
        }
        
        public void ServerTimeAsync(object userState)
        {
            if ((this.onBeginServerTimeDelegate == null))
            {
                this.onBeginServerTimeDelegate = new BeginOperationDelegate(this.OnBeginServerTime);
            }
            if ((this.onEndServerTimeDelegate == null))
            {
                this.onEndServerTimeDelegate = new EndOperationDelegate(this.OnEndServerTime);
            }
            if ((this.onServerTimeCompletedDelegate == null))
            {
                this.onServerTimeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnServerTimeCompleted);
            }
            base.InvokeAsync(this.onBeginServerTimeDelegate, null, this.onEndServerTimeDelegate, this.onServerTimeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Asmx.ServiceSoap.BeginLogin(string pDriver, string pPassword, string pTruck, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginLogin(pDriver, pPassword, pTruck, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        m.transport.Asmx.ArrayOfXElement m.transport.Asmx.ServiceSoap.EndLogin(System.IAsyncResult result)
        {
            return base.Channel.EndLogin(result);
        }
        
        private System.IAsyncResult OnBeginLogin(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            return ((m.transport.Asmx.ServiceSoap)(this)).BeginLogin(pDriver, pPassword, pTruck, callback, asyncState);
        }
        
        private object[] OnEndLogin(System.IAsyncResult result)
        {
            m.transport.Asmx.ArrayOfXElement retVal = ((m.transport.Asmx.ServiceSoap)(this)).EndLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoginCompleted(object state)
        {
            if ((this.LoginCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginCompleted(this, new LoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginAsync(string pDriver, string pPassword, string pTruck)
        {
            this.LoginAsync(pDriver, pPassword, pTruck, null);
        }
        
        public void LoginAsync(string pDriver, string pPassword, string pTruck, object userState)
        {
            if ((this.onBeginLoginDelegate == null))
            {
                this.onBeginLoginDelegate = new BeginOperationDelegate(this.OnBeginLogin);
            }
            if ((this.onEndLoginDelegate == null))
            {
                this.onEndLoginDelegate = new EndOperationDelegate(this.OnEndLogin);
            }
            if ((this.onLoginCompletedDelegate == null))
            {
                this.onLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            base.InvokeAsync(this.onBeginLoginDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck}, this.onEndLoginDelegate, this.onLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Asmx.ServiceSoap.BeginGetMileageDetails(string pNewTruck, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetMileageDetails(pNewTruck, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        m.transport.Asmx.ArrayOfXElement m.transport.Asmx.ServiceSoap.EndGetMileageDetails(System.IAsyncResult result)
        {
            return base.Channel.EndGetMileageDetails(result);
        }
        
        private System.IAsyncResult OnBeginGetMileageDetails(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pNewTruck = ((string)(inValues[0]));
            return ((m.transport.Asmx.ServiceSoap)(this)).BeginGetMileageDetails(pNewTruck, callback, asyncState);
        }
        
        private object[] OnEndGetMileageDetails(System.IAsyncResult result)
        {
            m.transport.Asmx.ArrayOfXElement retVal = ((m.transport.Asmx.ServiceSoap)(this)).EndGetMileageDetails(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMileageDetailsCompleted(object state)
        {
            if ((this.GetMileageDetailsCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMileageDetailsCompleted(this, new GetMileageDetailsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMileageDetailsAsync(string pNewTruck)
        {
            this.GetMileageDetailsAsync(pNewTruck, null);
        }
        
        public void GetMileageDetailsAsync(string pNewTruck, object userState)
        {
            if ((this.onBeginGetMileageDetailsDelegate == null))
            {
                this.onBeginGetMileageDetailsDelegate = new BeginOperationDelegate(this.OnBeginGetMileageDetails);
            }
            if ((this.onEndGetMileageDetailsDelegate == null))
            {
                this.onEndGetMileageDetailsDelegate = new EndOperationDelegate(this.OnEndGetMileageDetails);
            }
            if ((this.onGetMileageDetailsCompletedDelegate == null))
            {
                this.onGetMileageDetailsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMileageDetailsCompleted);
            }
            base.InvokeAsync(this.onBeginGetMileageDetailsDelegate, new object[] {
                        pNewTruck}, this.onEndGetMileageDetailsDelegate, this.onGetMileageDetailsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Asmx.ServiceSoap.BeginUpdateTruck(string pDriver, string pPassword, string pTruck, string pNewTruck, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginUpdateTruck(pDriver, pPassword, pTruck, pNewTruck, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        m.transport.Asmx.ArrayOfXElement m.transport.Asmx.ServiceSoap.EndUpdateTruck(System.IAsyncResult result)
        {
            return base.Channel.EndUpdateTruck(result);
        }
        
        private System.IAsyncResult OnBeginUpdateTruck(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            string pNewTruck = ((string)(inValues[3]));
            return ((m.transport.Asmx.ServiceSoap)(this)).BeginUpdateTruck(pDriver, pPassword, pTruck, pNewTruck, callback, asyncState);
        }
        
        private object[] OnEndUpdateTruck(System.IAsyncResult result)
        {
            m.transport.Asmx.ArrayOfXElement retVal = ((m.transport.Asmx.ServiceSoap)(this)).EndUpdateTruck(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateTruckCompleted(object state)
        {
            if ((this.UpdateTruckCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateTruckCompleted(this, new UpdateTruckCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateTruckAsync(string pDriver, string pPassword, string pTruck, string pNewTruck)
        {
            this.UpdateTruckAsync(pDriver, pPassword, pTruck, pNewTruck, null);
        }
        
        public void UpdateTruckAsync(string pDriver, string pPassword, string pTruck, string pNewTruck, object userState)
        {
            if ((this.onBeginUpdateTruckDelegate == null))
            {
                this.onBeginUpdateTruckDelegate = new BeginOperationDelegate(this.OnBeginUpdateTruck);
            }
            if ((this.onEndUpdateTruckDelegate == null))
            {
                this.onEndUpdateTruckDelegate = new EndOperationDelegate(this.OnEndUpdateTruck);
            }
            if ((this.onUpdateTruckCompletedDelegate == null))
            {
                this.onUpdateTruckCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateTruckCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateTruckDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck,
                        pNewTruck}, this.onEndUpdateTruckDelegate, this.onUpdateTruckCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Asmx.ServiceSoap.BeginUpdateOdometer(string pDriver, string pPassword, string pTruck, string pOdometer, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginUpdateOdometer(pDriver, pPassword, pTruck, pOdometer, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        m.transport.Asmx.ArrayOfXElement m.transport.Asmx.ServiceSoap.EndUpdateOdometer(System.IAsyncResult result)
        {
            return base.Channel.EndUpdateOdometer(result);
        }
        
        private System.IAsyncResult OnBeginUpdateOdometer(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            string pOdometer = ((string)(inValues[3]));
            return ((m.transport.Asmx.ServiceSoap)(this)).BeginUpdateOdometer(pDriver, pPassword, pTruck, pOdometer, callback, asyncState);
        }
        
        private object[] OnEndUpdateOdometer(System.IAsyncResult result)
        {
            m.transport.Asmx.ArrayOfXElement retVal = ((m.transport.Asmx.ServiceSoap)(this)).EndUpdateOdometer(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateOdometerCompleted(object state)
        {
            if ((this.UpdateOdometerCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateOdometerCompleted(this, new UpdateOdometerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateOdometerAsync(string pDriver, string pPassword, string pTruck, string pOdometer)
        {
            this.UpdateOdometerAsync(pDriver, pPassword, pTruck, pOdometer, null);
        }
        
        public void UpdateOdometerAsync(string pDriver, string pPassword, string pTruck, string pOdometer, object userState)
        {
            if ((this.onBeginUpdateOdometerDelegate == null))
            {
                this.onBeginUpdateOdometerDelegate = new BeginOperationDelegate(this.OnBeginUpdateOdometer);
            }
            if ((this.onEndUpdateOdometerDelegate == null))
            {
                this.onEndUpdateOdometerDelegate = new EndOperationDelegate(this.OnEndUpdateOdometer);
            }
            if ((this.onUpdateOdometerCompletedDelegate == null))
            {
                this.onUpdateOdometerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateOdometerCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateOdometerDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck,
                        pOdometer}, this.onEndUpdateOdometerDelegate, this.onUpdateOdometerCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Asmx.ServiceSoap.BeginGetDriverID(string pDriver, string pPassword, string pTruck, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetDriverID(pDriver, pPassword, pTruck, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        m.transport.Asmx.ArrayOfXElement m.transport.Asmx.ServiceSoap.EndGetDriverID(System.IAsyncResult result)
        {
            return base.Channel.EndGetDriverID(result);
        }
        
        private System.IAsyncResult OnBeginGetDriverID(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            return ((m.transport.Asmx.ServiceSoap)(this)).BeginGetDriverID(pDriver, pPassword, pTruck, callback, asyncState);
        }
        
        private object[] OnEndGetDriverID(System.IAsyncResult result)
        {
            m.transport.Asmx.ArrayOfXElement retVal = ((m.transport.Asmx.ServiceSoap)(this)).EndGetDriverID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDriverIDCompleted(object state)
        {
            if ((this.GetDriverIDCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDriverIDCompleted(this, new GetDriverIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDriverIDAsync(string pDriver, string pPassword, string pTruck)
        {
            this.GetDriverIDAsync(pDriver, pPassword, pTruck, null);
        }
        
        public void GetDriverIDAsync(string pDriver, string pPassword, string pTruck, object userState)
        {
            if ((this.onBeginGetDriverIDDelegate == null))
            {
                this.onBeginGetDriverIDDelegate = new BeginOperationDelegate(this.OnBeginGetDriverID);
            }
            if ((this.onEndGetDriverIDDelegate == null))
            {
                this.onEndGetDriverIDDelegate = new EndOperationDelegate(this.OnEndGetDriverID);
            }
            if ((this.onGetDriverIDCompletedDelegate == null))
            {
                this.onGetDriverIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDriverIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetDriverIDDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck}, this.onEndGetDriverIDDelegate, this.onGetDriverIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Asmx.ServiceSoap.BeginCurrentLoad(string pDriver, string pPassword, string pTruck, m.transport.Asmx.ArrayOfXElement pCurrentLoad, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginCurrentLoad(pDriver, pPassword, pTruck, pCurrentLoad, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        m.transport.Asmx.ArrayOfXElement m.transport.Asmx.ServiceSoap.EndCurrentLoad(System.IAsyncResult result)
        {
            return base.Channel.EndCurrentLoad(result);
        }
        
        private System.IAsyncResult OnBeginCurrentLoad(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            m.transport.Asmx.ArrayOfXElement pCurrentLoad = ((m.transport.Asmx.ArrayOfXElement)(inValues[3]));
            return ((m.transport.Asmx.ServiceSoap)(this)).BeginCurrentLoad(pDriver, pPassword, pTruck, pCurrentLoad, callback, asyncState);
        }
        
        private object[] OnEndCurrentLoad(System.IAsyncResult result)
        {
            m.transport.Asmx.ArrayOfXElement retVal = ((m.transport.Asmx.ServiceSoap)(this)).EndCurrentLoad(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCurrentLoadCompleted(object state)
        {
            if ((this.CurrentLoadCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CurrentLoadCompleted(this, new CurrentLoadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CurrentLoadAsync(string pDriver, string pPassword, string pTruck, m.transport.Asmx.ArrayOfXElement pCurrentLoad)
        {
            this.CurrentLoadAsync(pDriver, pPassword, pTruck, pCurrentLoad, null);
        }
        
        public void CurrentLoadAsync(string pDriver, string pPassword, string pTruck, m.transport.Asmx.ArrayOfXElement pCurrentLoad, object userState)
        {
            if ((this.onBeginCurrentLoadDelegate == null))
            {
                this.onBeginCurrentLoadDelegate = new BeginOperationDelegate(this.OnBeginCurrentLoad);
            }
            if ((this.onEndCurrentLoadDelegate == null))
            {
                this.onEndCurrentLoadDelegate = new EndOperationDelegate(this.OnEndCurrentLoad);
            }
            if ((this.onCurrentLoadCompletedDelegate == null))
            {
                this.onCurrentLoadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCurrentLoadCompleted);
            }
            base.InvokeAsync(this.onBeginCurrentLoadDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck,
                        pCurrentLoad}, this.onEndCurrentLoadDelegate, this.onCurrentLoadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Asmx.ServiceSoap.BeginCurrentLoadEx(string pDriver, string pPassword, string pTruck, string pDriverID, m.transport.Asmx.ArrayOfXElement pCurrentLoad, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginCurrentLoadEx(pDriver, pPassword, pTruck, pDriverID, pCurrentLoad, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        m.transport.Asmx.ArrayOfXElement m.transport.Asmx.ServiceSoap.EndCurrentLoadEx(System.IAsyncResult result)
        {
            return base.Channel.EndCurrentLoadEx(result);
        }
        
        private System.IAsyncResult OnBeginCurrentLoadEx(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            string pDriverID = ((string)(inValues[3]));
            m.transport.Asmx.ArrayOfXElement pCurrentLoad = ((m.transport.Asmx.ArrayOfXElement)(inValues[4]));
            return ((m.transport.Asmx.ServiceSoap)(this)).BeginCurrentLoadEx(pDriver, pPassword, pTruck, pDriverID, pCurrentLoad, callback, asyncState);
        }
        
        private object[] OnEndCurrentLoadEx(System.IAsyncResult result)
        {
            m.transport.Asmx.ArrayOfXElement retVal = ((m.transport.Asmx.ServiceSoap)(this)).EndCurrentLoadEx(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCurrentLoadExCompleted(object state)
        {
            if ((this.CurrentLoadExCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CurrentLoadExCompleted(this, new CurrentLoadExCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CurrentLoadExAsync(string pDriver, string pPassword, string pTruck, string pDriverID, m.transport.Asmx.ArrayOfXElement pCurrentLoad)
        {
            this.CurrentLoadExAsync(pDriver, pPassword, pTruck, pDriverID, pCurrentLoad, null);
        }
        
        public void CurrentLoadExAsync(string pDriver, string pPassword, string pTruck, string pDriverID, m.transport.Asmx.ArrayOfXElement pCurrentLoad, object userState)
        {
            if ((this.onBeginCurrentLoadExDelegate == null))
            {
                this.onBeginCurrentLoadExDelegate = new BeginOperationDelegate(this.OnBeginCurrentLoadEx);
            }
            if ((this.onEndCurrentLoadExDelegate == null))
            {
                this.onEndCurrentLoadExDelegate = new EndOperationDelegate(this.OnEndCurrentLoadEx);
            }
            if ((this.onCurrentLoadExCompletedDelegate == null))
            {
                this.onCurrentLoadExCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCurrentLoadExCompleted);
            }
            base.InvokeAsync(this.onBeginCurrentLoadExDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck,
                        pDriverID,
                        pCurrentLoad}, this.onEndCurrentLoadExDelegate, this.onCurrentLoadExCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Asmx.ServiceSoap.BeginGetRunList(string pDriver, string pPassword, string pTruck, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetRunList(pDriver, pPassword, pTruck, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        m.transport.Asmx.ArrayOfXElement m.transport.Asmx.ServiceSoap.EndGetRunList(System.IAsyncResult result)
        {
            return base.Channel.EndGetRunList(result);
        }
        
        private System.IAsyncResult OnBeginGetRunList(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            return ((m.transport.Asmx.ServiceSoap)(this)).BeginGetRunList(pDriver, pPassword, pTruck, callback, asyncState);
        }
        
        private object[] OnEndGetRunList(System.IAsyncResult result)
        {
            m.transport.Asmx.ArrayOfXElement retVal = ((m.transport.Asmx.ServiceSoap)(this)).EndGetRunList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRunListCompleted(object state)
        {
            if ((this.GetRunListCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRunListCompleted(this, new GetRunListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRunListAsync(string pDriver, string pPassword, string pTruck)
        {
            this.GetRunListAsync(pDriver, pPassword, pTruck, null);
        }
        
        public void GetRunListAsync(string pDriver, string pPassword, string pTruck, object userState)
        {
            if ((this.onBeginGetRunListDelegate == null))
            {
                this.onBeginGetRunListDelegate = new BeginOperationDelegate(this.OnBeginGetRunList);
            }
            if ((this.onEndGetRunListDelegate == null))
            {
                this.onEndGetRunListDelegate = new EndOperationDelegate(this.OnEndGetRunList);
            }
            if ((this.onGetRunListCompletedDelegate == null))
            {
                this.onGetRunListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRunListCompleted);
            }
            base.InvokeAsync(this.onBeginGetRunListDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck}, this.onEndGetRunListDelegate, this.onGetRunListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Asmx.ServiceSoap.BeginGetRunDetail(string pDriver, string pPassword, string pTruck, string pRunID, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetRunDetail(pDriver, pPassword, pTruck, pRunID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        m.transport.Asmx.ArrayOfXElement m.transport.Asmx.ServiceSoap.EndGetRunDetail(System.IAsyncResult result)
        {
            return base.Channel.EndGetRunDetail(result);
        }
        
        private System.IAsyncResult OnBeginGetRunDetail(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            string pRunID = ((string)(inValues[3]));
            return ((m.transport.Asmx.ServiceSoap)(this)).BeginGetRunDetail(pDriver, pPassword, pTruck, pRunID, callback, asyncState);
        }
        
        private object[] OnEndGetRunDetail(System.IAsyncResult result)
        {
            m.transport.Asmx.ArrayOfXElement retVal = ((m.transport.Asmx.ServiceSoap)(this)).EndGetRunDetail(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRunDetailCompleted(object state)
        {
            if ((this.GetRunDetailCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRunDetailCompleted(this, new GetRunDetailCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRunDetailAsync(string pDriver, string pPassword, string pTruck, string pRunID)
        {
            this.GetRunDetailAsync(pDriver, pPassword, pTruck, pRunID, null);
        }
        
        public void GetRunDetailAsync(string pDriver, string pPassword, string pTruck, string pRunID, object userState)
        {
            if ((this.onBeginGetRunDetailDelegate == null))
            {
                this.onBeginGetRunDetailDelegate = new BeginOperationDelegate(this.OnBeginGetRunDetail);
            }
            if ((this.onEndGetRunDetailDelegate == null))
            {
                this.onEndGetRunDetailDelegate = new EndOperationDelegate(this.OnEndGetRunDetail);
            }
            if ((this.onGetRunDetailCompletedDelegate == null))
            {
                this.onGetRunDetailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRunDetailCompleted);
            }
            base.InvokeAsync(this.onBeginGetRunDetailDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck,
                        pRunID}, this.onEndGetRunDetailDelegate, this.onGetRunDetailCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Asmx.ServiceSoap.BeginGetDamageCodeList(string pDriver, string pPassword, string pTruck, string pHandheldID, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetDamageCodeList(pDriver, pPassword, pTruck, pHandheldID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        m.transport.Asmx.ArrayOfXElement m.transport.Asmx.ServiceSoap.EndGetDamageCodeList(System.IAsyncResult result)
        {
            return base.Channel.EndGetDamageCodeList(result);
        }
        
        private System.IAsyncResult OnBeginGetDamageCodeList(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            string pHandheldID = ((string)(inValues[3]));
            return ((m.transport.Asmx.ServiceSoap)(this)).BeginGetDamageCodeList(pDriver, pPassword, pTruck, pHandheldID, callback, asyncState);
        }
        
        private object[] OnEndGetDamageCodeList(System.IAsyncResult result)
        {
            m.transport.Asmx.ArrayOfXElement retVal = ((m.transport.Asmx.ServiceSoap)(this)).EndGetDamageCodeList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDamageCodeListCompleted(object state)
        {
            if ((this.GetDamageCodeListCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDamageCodeListCompleted(this, new GetDamageCodeListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDamageCodeListAsync(string pDriver, string pPassword, string pTruck, string pHandheldID)
        {
            this.GetDamageCodeListAsync(pDriver, pPassword, pTruck, pHandheldID, null);
        }
        
        public void GetDamageCodeListAsync(string pDriver, string pPassword, string pTruck, string pHandheldID, object userState)
        {
            if ((this.onBeginGetDamageCodeListDelegate == null))
            {
                this.onBeginGetDamageCodeListDelegate = new BeginOperationDelegate(this.OnBeginGetDamageCodeList);
            }
            if ((this.onEndGetDamageCodeListDelegate == null))
            {
                this.onEndGetDamageCodeListDelegate = new EndOperationDelegate(this.OnEndGetDamageCodeList);
            }
            if ((this.onGetDamageCodeListCompletedDelegate == null))
            {
                this.onGetDamageCodeListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDamageCodeListCompleted);
            }
            base.InvokeAsync(this.onBeginGetDamageCodeListDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck,
                        pHandheldID}, this.onEndGetDamageCodeListDelegate, this.onGetDamageCodeListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Asmx.ServiceSoap.BeginrefreshDamageAreaAndcode(string pDriver, string pPassword, string pTruck, System.DateTime pDamageTypeAndLocationSyncDate, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginrefreshDamageAreaAndcode(pDriver, pPassword, pTruck, pDamageTypeAndLocationSyncDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        m.transport.Asmx.ArrayOfXElement m.transport.Asmx.ServiceSoap.EndrefreshDamageAreaAndcode(System.IAsyncResult result)
        {
            return base.Channel.EndrefreshDamageAreaAndcode(result);
        }
        
        private System.IAsyncResult OnBeginrefreshDamageAreaAndcode(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            System.DateTime pDamageTypeAndLocationSyncDate = ((System.DateTime)(inValues[3]));
            return ((m.transport.Asmx.ServiceSoap)(this)).BeginrefreshDamageAreaAndcode(pDriver, pPassword, pTruck, pDamageTypeAndLocationSyncDate, callback, asyncState);
        }
        
        private object[] OnEndrefreshDamageAreaAndcode(System.IAsyncResult result)
        {
            m.transport.Asmx.ArrayOfXElement retVal = ((m.transport.Asmx.ServiceSoap)(this)).EndrefreshDamageAreaAndcode(result);
            return new object[] {
                    retVal};
        }
        
        private void OnrefreshDamageAreaAndcodeCompleted(object state)
        {
            if ((this.refreshDamageAreaAndcodeCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.refreshDamageAreaAndcodeCompleted(this, new refreshDamageAreaAndcodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void refreshDamageAreaAndcodeAsync(string pDriver, string pPassword, string pTruck, System.DateTime pDamageTypeAndLocationSyncDate)
        {
            this.refreshDamageAreaAndcodeAsync(pDriver, pPassword, pTruck, pDamageTypeAndLocationSyncDate, null);
        }
        
        public void refreshDamageAreaAndcodeAsync(string pDriver, string pPassword, string pTruck, System.DateTime pDamageTypeAndLocationSyncDate, object userState)
        {
            if ((this.onBeginrefreshDamageAreaAndcodeDelegate == null))
            {
                this.onBeginrefreshDamageAreaAndcodeDelegate = new BeginOperationDelegate(this.OnBeginrefreshDamageAreaAndcode);
            }
            if ((this.onEndrefreshDamageAreaAndcodeDelegate == null))
            {
                this.onEndrefreshDamageAreaAndcodeDelegate = new EndOperationDelegate(this.OnEndrefreshDamageAreaAndcode);
            }
            if ((this.onrefreshDamageAreaAndcodeCompletedDelegate == null))
            {
                this.onrefreshDamageAreaAndcodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnrefreshDamageAreaAndcodeCompleted);
            }
            base.InvokeAsync(this.onBeginrefreshDamageAreaAndcodeDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck,
                        pDamageTypeAndLocationSyncDate}, this.onEndrefreshDamageAreaAndcodeDelegate, this.onrefreshDamageAreaAndcodeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Asmx.ServiceSoap.BeginGetExpenseTypeList(string pDriver, string pPassword, string pTruck, string pHandheldID, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetExpenseTypeList(pDriver, pPassword, pTruck, pHandheldID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        m.transport.Asmx.ArrayOfXElement m.transport.Asmx.ServiceSoap.EndGetExpenseTypeList(System.IAsyncResult result)
        {
            return base.Channel.EndGetExpenseTypeList(result);
        }
        
        private System.IAsyncResult OnBeginGetExpenseTypeList(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            string pHandheldID = ((string)(inValues[3]));
            return ((m.transport.Asmx.ServiceSoap)(this)).BeginGetExpenseTypeList(pDriver, pPassword, pTruck, pHandheldID, callback, asyncState);
        }
        
        private object[] OnEndGetExpenseTypeList(System.IAsyncResult result)
        {
            m.transport.Asmx.ArrayOfXElement retVal = ((m.transport.Asmx.ServiceSoap)(this)).EndGetExpenseTypeList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetExpenseTypeListCompleted(object state)
        {
            if ((this.GetExpenseTypeListCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetExpenseTypeListCompleted(this, new GetExpenseTypeListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetExpenseTypeListAsync(string pDriver, string pPassword, string pTruck, string pHandheldID)
        {
            this.GetExpenseTypeListAsync(pDriver, pPassword, pTruck, pHandheldID, null);
        }
        
        public void GetExpenseTypeListAsync(string pDriver, string pPassword, string pTruck, string pHandheldID, object userState)
        {
            if ((this.onBeginGetExpenseTypeListDelegate == null))
            {
                this.onBeginGetExpenseTypeListDelegate = new BeginOperationDelegate(this.OnBeginGetExpenseTypeList);
            }
            if ((this.onEndGetExpenseTypeListDelegate == null))
            {
                this.onEndGetExpenseTypeListDelegate = new EndOperationDelegate(this.OnEndGetExpenseTypeList);
            }
            if ((this.onGetExpenseTypeListCompletedDelegate == null))
            {
                this.onGetExpenseTypeListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetExpenseTypeListCompleted);
            }
            base.InvokeAsync(this.onBeginGetExpenseTypeListDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck,
                        pHandheldID}, this.onEndGetExpenseTypeListDelegate, this.onGetExpenseTypeListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Asmx.ServiceSoap.BeginGetReasonList(string pDriver, string pPassword, string pTruck, string pHandheldID, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetReasonList(pDriver, pPassword, pTruck, pHandheldID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        m.transport.Asmx.ArrayOfXElement m.transport.Asmx.ServiceSoap.EndGetReasonList(System.IAsyncResult result)
        {
            return base.Channel.EndGetReasonList(result);
        }
        
        private System.IAsyncResult OnBeginGetReasonList(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            string pHandheldID = ((string)(inValues[3]));
            return ((m.transport.Asmx.ServiceSoap)(this)).BeginGetReasonList(pDriver, pPassword, pTruck, pHandheldID, callback, asyncState);
        }
        
        private object[] OnEndGetReasonList(System.IAsyncResult result)
        {
            m.transport.Asmx.ArrayOfXElement retVal = ((m.transport.Asmx.ServiceSoap)(this)).EndGetReasonList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetReasonListCompleted(object state)
        {
            if ((this.GetReasonListCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetReasonListCompleted(this, new GetReasonListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetReasonListAsync(string pDriver, string pPassword, string pTruck, string pHandheldID)
        {
            this.GetReasonListAsync(pDriver, pPassword, pTruck, pHandheldID, null);
        }
        
        public void GetReasonListAsync(string pDriver, string pPassword, string pTruck, string pHandheldID, object userState)
        {
            if ((this.onBeginGetReasonListDelegate == null))
            {
                this.onBeginGetReasonListDelegate = new BeginOperationDelegate(this.OnBeginGetReasonList);
            }
            if ((this.onEndGetReasonListDelegate == null))
            {
                this.onEndGetReasonListDelegate = new EndOperationDelegate(this.OnEndGetReasonList);
            }
            if ((this.onGetReasonListCompletedDelegate == null))
            {
                this.onGetReasonListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetReasonListCompleted);
            }
            base.InvokeAsync(this.onBeginGetReasonListDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck,
                        pHandheldID}, this.onEndGetReasonListDelegate, this.onGetReasonListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Asmx.ServiceSoap.BeginGetUnpaidExpenseList(string pDriver, string pPassword, string pTruck, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetUnpaidExpenseList(pDriver, pPassword, pTruck, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        m.transport.Asmx.ArrayOfXElement m.transport.Asmx.ServiceSoap.EndGetUnpaidExpenseList(System.IAsyncResult result)
        {
            return base.Channel.EndGetUnpaidExpenseList(result);
        }
        
        private System.IAsyncResult OnBeginGetUnpaidExpenseList(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            return ((m.transport.Asmx.ServiceSoap)(this)).BeginGetUnpaidExpenseList(pDriver, pPassword, pTruck, callback, asyncState);
        }
        
        private object[] OnEndGetUnpaidExpenseList(System.IAsyncResult result)
        {
            m.transport.Asmx.ArrayOfXElement retVal = ((m.transport.Asmx.ServiceSoap)(this)).EndGetUnpaidExpenseList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUnpaidExpenseListCompleted(object state)
        {
            if ((this.GetUnpaidExpenseListCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUnpaidExpenseListCompleted(this, new GetUnpaidExpenseListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUnpaidExpenseListAsync(string pDriver, string pPassword, string pTruck)
        {
            this.GetUnpaidExpenseListAsync(pDriver, pPassword, pTruck, null);
        }
        
        public void GetUnpaidExpenseListAsync(string pDriver, string pPassword, string pTruck, object userState)
        {
            if ((this.onBeginGetUnpaidExpenseListDelegate == null))
            {
                this.onBeginGetUnpaidExpenseListDelegate = new BeginOperationDelegate(this.OnBeginGetUnpaidExpenseList);
            }
            if ((this.onEndGetUnpaidExpenseListDelegate == null))
            {
                this.onEndGetUnpaidExpenseListDelegate = new EndOperationDelegate(this.OnEndGetUnpaidExpenseList);
            }
            if ((this.onGetUnpaidExpenseListCompletedDelegate == null))
            {
                this.onGetUnpaidExpenseListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUnpaidExpenseListCompleted);
            }
            base.InvokeAsync(this.onBeginGetUnpaidExpenseListDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck}, this.onEndGetUnpaidExpenseListDelegate, this.onGetUnpaidExpenseListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Asmx.ServiceSoap.BeginSendExpense(string pDriver, string pPassword, string pTruck, m.transport.Asmx.ArrayOfXElement pExpense, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginSendExpense(pDriver, pPassword, pTruck, pExpense, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        m.transport.Asmx.ArrayOfXElement m.transport.Asmx.ServiceSoap.EndSendExpense(System.IAsyncResult result)
        {
            return base.Channel.EndSendExpense(result);
        }
        
        private System.IAsyncResult OnBeginSendExpense(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            m.transport.Asmx.ArrayOfXElement pExpense = ((m.transport.Asmx.ArrayOfXElement)(inValues[3]));
            return ((m.transport.Asmx.ServiceSoap)(this)).BeginSendExpense(pDriver, pPassword, pTruck, pExpense, callback, asyncState);
        }
        
        private object[] OnEndSendExpense(System.IAsyncResult result)
        {
            m.transport.Asmx.ArrayOfXElement retVal = ((m.transport.Asmx.ServiceSoap)(this)).EndSendExpense(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendExpenseCompleted(object state)
        {
            if ((this.SendExpenseCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendExpenseCompleted(this, new SendExpenseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendExpenseAsync(string pDriver, string pPassword, string pTruck, m.transport.Asmx.ArrayOfXElement pExpense)
        {
            this.SendExpenseAsync(pDriver, pPassword, pTruck, pExpense, null);
        }
        
        public void SendExpenseAsync(string pDriver, string pPassword, string pTruck, m.transport.Asmx.ArrayOfXElement pExpense, object userState)
        {
            if ((this.onBeginSendExpenseDelegate == null))
            {
                this.onBeginSendExpenseDelegate = new BeginOperationDelegate(this.OnBeginSendExpense);
            }
            if ((this.onEndSendExpenseDelegate == null))
            {
                this.onEndSendExpenseDelegate = new EndOperationDelegate(this.OnEndSendExpense);
            }
            if ((this.onSendExpenseCompletedDelegate == null))
            {
                this.onSendExpenseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendExpenseCompleted);
            }
            base.InvokeAsync(this.onBeginSendExpenseDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck,
                        pExpense}, this.onEndSendExpenseDelegate, this.onSendExpenseCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Asmx.ServiceSoap.BeginSendExceptionResponse(string pDriver, string pPassword, string pTruck, m.transport.Asmx.ArrayOfXElement pExceptionResponse, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginSendExceptionResponse(pDriver, pPassword, pTruck, pExceptionResponse, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        m.transport.Asmx.ArrayOfXElement m.transport.Asmx.ServiceSoap.EndSendExceptionResponse(System.IAsyncResult result)
        {
            return base.Channel.EndSendExceptionResponse(result);
        }
        
        private System.IAsyncResult OnBeginSendExceptionResponse(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            m.transport.Asmx.ArrayOfXElement pExceptionResponse = ((m.transport.Asmx.ArrayOfXElement)(inValues[3]));
            return ((m.transport.Asmx.ServiceSoap)(this)).BeginSendExceptionResponse(pDriver, pPassword, pTruck, pExceptionResponse, callback, asyncState);
        }
        
        private object[] OnEndSendExceptionResponse(System.IAsyncResult result)
        {
            m.transport.Asmx.ArrayOfXElement retVal = ((m.transport.Asmx.ServiceSoap)(this)).EndSendExceptionResponse(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendExceptionResponseCompleted(object state)
        {
            if ((this.SendExceptionResponseCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendExceptionResponseCompleted(this, new SendExceptionResponseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendExceptionResponseAsync(string pDriver, string pPassword, string pTruck, m.transport.Asmx.ArrayOfXElement pExceptionResponse)
        {
            this.SendExceptionResponseAsync(pDriver, pPassword, pTruck, pExceptionResponse, null);
        }
        
        public void SendExceptionResponseAsync(string pDriver, string pPassword, string pTruck, m.transport.Asmx.ArrayOfXElement pExceptionResponse, object userState)
        {
            if ((this.onBeginSendExceptionResponseDelegate == null))
            {
                this.onBeginSendExceptionResponseDelegate = new BeginOperationDelegate(this.OnBeginSendExceptionResponse);
            }
            if ((this.onEndSendExceptionResponseDelegate == null))
            {
                this.onEndSendExceptionResponseDelegate = new EndOperationDelegate(this.OnEndSendExceptionResponse);
            }
            if ((this.onSendExceptionResponseCompletedDelegate == null))
            {
                this.onSendExceptionResponseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendExceptionResponseCompleted);
            }
            base.InvokeAsync(this.onBeginSendExceptionResponseDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck,
                        pExceptionResponse}, this.onEndSendExceptionResponseDelegate, this.onSendExceptionResponseCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Asmx.ServiceSoap.BeginVerifyVIN(string pDriver, string pPassword, string pTruck, string pVIN, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginVerifyVIN(pDriver, pPassword, pTruck, pVIN, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        m.transport.Asmx.ArrayOfXElement m.transport.Asmx.ServiceSoap.EndVerifyVIN(System.IAsyncResult result)
        {
            return base.Channel.EndVerifyVIN(result);
        }
        
        private System.IAsyncResult OnBeginVerifyVIN(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            string pVIN = ((string)(inValues[3]));
            return ((m.transport.Asmx.ServiceSoap)(this)).BeginVerifyVIN(pDriver, pPassword, pTruck, pVIN, callback, asyncState);
        }
        
        private object[] OnEndVerifyVIN(System.IAsyncResult result)
        {
            m.transport.Asmx.ArrayOfXElement retVal = ((m.transport.Asmx.ServiceSoap)(this)).EndVerifyVIN(result);
            return new object[] {
                    retVal};
        }
        
        private void OnVerifyVINCompleted(object state)
        {
            if ((this.VerifyVINCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.VerifyVINCompleted(this, new VerifyVINCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void VerifyVINAsync(string pDriver, string pPassword, string pTruck, string pVIN)
        {
            this.VerifyVINAsync(pDriver, pPassword, pTruck, pVIN, null);
        }
        
        public void VerifyVINAsync(string pDriver, string pPassword, string pTruck, string pVIN, object userState)
        {
            if ((this.onBeginVerifyVINDelegate == null))
            {
                this.onBeginVerifyVINDelegate = new BeginOperationDelegate(this.OnBeginVerifyVIN);
            }
            if ((this.onEndVerifyVINDelegate == null))
            {
                this.onEndVerifyVINDelegate = new EndOperationDelegate(this.OnEndVerifyVIN);
            }
            if ((this.onVerifyVINCompletedDelegate == null))
            {
                this.onVerifyVINCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnVerifyVINCompleted);
            }
            base.InvokeAsync(this.onBeginVerifyVINDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck,
                        pVIN}, this.onEndVerifyVINDelegate, this.onVerifyVINCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Asmx.ServiceSoap.BeginSendDriverSignature(m.transport.Asmx.SendDriverSignatureRequest request, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginSendDriverSignature(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginSendDriverSignature(string pDriver, string pPassword, string pTruck, byte[] pSignatureData, System.AsyncCallback callback, object asyncState)
        {
            m.transport.Asmx.SendDriverSignatureRequest inValue = new m.transport.Asmx.SendDriverSignatureRequest();
            inValue.pDriver = pDriver;
            inValue.pPassword = pPassword;
            inValue.pTruck = pTruck;
            inValue.pSignatureData = pSignatureData;
            return ((m.transport.Asmx.ServiceSoap)(this)).BeginSendDriverSignature(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        m.transport.Asmx.SendDriverSignatureResponse m.transport.Asmx.ServiceSoap.EndSendDriverSignature(System.IAsyncResult result)
        {
            return base.Channel.EndSendDriverSignature(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private m.transport.Asmx.ArrayOfXElement EndSendDriverSignature(System.IAsyncResult result)
        {
            m.transport.Asmx.SendDriverSignatureResponse retVal = ((m.transport.Asmx.ServiceSoap)(this)).EndSendDriverSignature(result);
            return retVal.SendDriverSignatureResult;
        }
        
        private System.IAsyncResult OnBeginSendDriverSignature(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            byte[] pSignatureData = ((byte[])(inValues[3]));
            return this.BeginSendDriverSignature(pDriver, pPassword, pTruck, pSignatureData, callback, asyncState);
        }
        
        private object[] OnEndSendDriverSignature(System.IAsyncResult result)
        {
            m.transport.Asmx.ArrayOfXElement retVal = this.EndSendDriverSignature(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendDriverSignatureCompleted(object state)
        {
            if ((this.SendDriverSignatureCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendDriverSignatureCompleted(this, new SendDriverSignatureCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendDriverSignatureAsync(string pDriver, string pPassword, string pTruck, byte[] pSignatureData)
        {
            this.SendDriverSignatureAsync(pDriver, pPassword, pTruck, pSignatureData, null);
        }
        
        public void SendDriverSignatureAsync(string pDriver, string pPassword, string pTruck, byte[] pSignatureData, object userState)
        {
            if ((this.onBeginSendDriverSignatureDelegate == null))
            {
                this.onBeginSendDriverSignatureDelegate = new BeginOperationDelegate(this.OnBeginSendDriverSignature);
            }
            if ((this.onEndSendDriverSignatureDelegate == null))
            {
                this.onEndSendDriverSignatureDelegate = new EndOperationDelegate(this.OnEndSendDriverSignature);
            }
            if ((this.onSendDriverSignatureCompletedDelegate == null))
            {
                this.onSendDriverSignatureCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendDriverSignatureCompleted);
            }
            base.InvokeAsync(this.onBeginSendDriverSignatureDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck,
                        pSignatureData}, this.onEndSendDriverSignatureDelegate, this.onSendDriverSignatureCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result)
        {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state)
        {
            if ((this.OpenCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync()
        {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState)
        {
            if ((this.onBeginOpenDelegate == null))
            {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null))
            {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null))
            {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result)
        {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state)
        {
            if ((this.CloseCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync()
        {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState)
        {
            if ((this.onBeginCloseDelegate == null))
            {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null))
            {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null))
            {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override m.transport.Asmx.ServiceSoap CreateChannel()
        {
            return new ServiceSoapClientChannel(this);
        }
        
        private class ServiceSoapClientChannel : ChannelBase<m.transport.Asmx.ServiceSoap>, m.transport.Asmx.ServiceSoap
        {
            
            public ServiceSoapClientChannel(System.ServiceModel.ClientBase<m.transport.Asmx.ServiceSoap> client) : 
                    base(client)
            {
            }
            
            public System.IAsyncResult BeginGetLatestReleaseVersion(string appVersion, string inspectorCode, string inspectorName, string handHeldID, string localTime, string localTimeZone, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[6];
                _args[0] = appVersion;
                _args[1] = inspectorCode;
                _args[2] = inspectorName;
                _args[3] = handHeldID;
                _args[4] = localTime;
                _args[5] = localTimeZone;
                System.IAsyncResult _result = base.BeginInvoke("GetLatestReleaseVersion", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetLatestReleaseVersion(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetLatestReleaseVersion", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDownloadRelease(string appVersion, string inspectorCode, string inspectorName, string handHeldID, string localTime, string localTimeZone, string version, int currentPosition, int chunckSize, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[9];
                _args[0] = appVersion;
                _args[1] = inspectorCode;
                _args[2] = inspectorName;
                _args[3] = handHeldID;
                _args[4] = localTime;
                _args[5] = localTimeZone;
                _args[6] = version;
                _args[7] = currentPosition;
                _args[8] = chunckSize;
                System.IAsyncResult _result = base.BeginInvoke("DownloadRelease", _args, callback, asyncState);
                return _result;
            }
            
            public m.transport.Asmx.DAIFileDetails EndDownloadRelease(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                m.transport.Asmx.DAIFileDetails _result = ((m.transport.Asmx.DAIFileDetails)(base.EndInvoke("DownloadRelease", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginVersion(System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("Version", _args, callback, asyncState);
                return _result;
            }
            
            public string EndVersion(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("Version", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginConnected(System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("Connected", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndConnected(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("Connected", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginServerTime(System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ServerTime", _args, callback, asyncState);
                return _result;
            }
            
            public string EndServerTime(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("ServerTime", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLogin(string pDriver, string pPassword, string pTruck, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[3];
                _args[0] = pDriver;
                _args[1] = pPassword;
                _args[2] = pTruck;
                System.IAsyncResult _result = base.BeginInvoke("Login", _args, callback, asyncState);
                return _result;
            }
            
            public m.transport.Asmx.ArrayOfXElement EndLogin(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                m.transport.Asmx.ArrayOfXElement _result = ((m.transport.Asmx.ArrayOfXElement)(base.EndInvoke("Login", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetMileageDetails(string pNewTruck, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[1];
                _args[0] = pNewTruck;
                System.IAsyncResult _result = base.BeginInvoke("GetMileageDetails", _args, callback, asyncState);
                return _result;
            }
            
            public m.transport.Asmx.ArrayOfXElement EndGetMileageDetails(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                m.transport.Asmx.ArrayOfXElement _result = ((m.transport.Asmx.ArrayOfXElement)(base.EndInvoke("GetMileageDetails", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateTruck(string pDriver, string pPassword, string pTruck, string pNewTruck, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[4];
                _args[0] = pDriver;
                _args[1] = pPassword;
                _args[2] = pTruck;
                _args[3] = pNewTruck;
                System.IAsyncResult _result = base.BeginInvoke("UpdateTruck", _args, callback, asyncState);
                return _result;
            }
            
            public m.transport.Asmx.ArrayOfXElement EndUpdateTruck(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                m.transport.Asmx.ArrayOfXElement _result = ((m.transport.Asmx.ArrayOfXElement)(base.EndInvoke("UpdateTruck", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateOdometer(string pDriver, string pPassword, string pTruck, string pOdometer, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[4];
                _args[0] = pDriver;
                _args[1] = pPassword;
                _args[2] = pTruck;
                _args[3] = pOdometer;
                System.IAsyncResult _result = base.BeginInvoke("UpdateOdometer", _args, callback, asyncState);
                return _result;
            }
            
            public m.transport.Asmx.ArrayOfXElement EndUpdateOdometer(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                m.transport.Asmx.ArrayOfXElement _result = ((m.transport.Asmx.ArrayOfXElement)(base.EndInvoke("UpdateOdometer", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDriverID(string pDriver, string pPassword, string pTruck, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[3];
                _args[0] = pDriver;
                _args[1] = pPassword;
                _args[2] = pTruck;
                System.IAsyncResult _result = base.BeginInvoke("GetDriverID", _args, callback, asyncState);
                return _result;
            }
            
            public m.transport.Asmx.ArrayOfXElement EndGetDriverID(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                m.transport.Asmx.ArrayOfXElement _result = ((m.transport.Asmx.ArrayOfXElement)(base.EndInvoke("GetDriverID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCurrentLoad(string pDriver, string pPassword, string pTruck, m.transport.Asmx.ArrayOfXElement pCurrentLoad, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[4];
                _args[0] = pDriver;
                _args[1] = pPassword;
                _args[2] = pTruck;
                _args[3] = pCurrentLoad;
                System.IAsyncResult _result = base.BeginInvoke("CurrentLoad", _args, callback, asyncState);
                return _result;
            }
            
            public m.transport.Asmx.ArrayOfXElement EndCurrentLoad(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                m.transport.Asmx.ArrayOfXElement _result = ((m.transport.Asmx.ArrayOfXElement)(base.EndInvoke("CurrentLoad", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCurrentLoadEx(string pDriver, string pPassword, string pTruck, string pDriverID, m.transport.Asmx.ArrayOfXElement pCurrentLoad, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[5];
                _args[0] = pDriver;
                _args[1] = pPassword;
                _args[2] = pTruck;
                _args[3] = pDriverID;
                _args[4] = pCurrentLoad;
                System.IAsyncResult _result = base.BeginInvoke("CurrentLoadEx", _args, callback, asyncState);
                return _result;
            }
            
            public m.transport.Asmx.ArrayOfXElement EndCurrentLoadEx(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                m.transport.Asmx.ArrayOfXElement _result = ((m.transport.Asmx.ArrayOfXElement)(base.EndInvoke("CurrentLoadEx", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetRunList(string pDriver, string pPassword, string pTruck, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[3];
                _args[0] = pDriver;
                _args[1] = pPassword;
                _args[2] = pTruck;
                System.IAsyncResult _result = base.BeginInvoke("GetRunList", _args, callback, asyncState);
                return _result;
            }
            
            public m.transport.Asmx.ArrayOfXElement EndGetRunList(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                m.transport.Asmx.ArrayOfXElement _result = ((m.transport.Asmx.ArrayOfXElement)(base.EndInvoke("GetRunList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetRunDetail(string pDriver, string pPassword, string pTruck, string pRunID, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[4];
                _args[0] = pDriver;
                _args[1] = pPassword;
                _args[2] = pTruck;
                _args[3] = pRunID;
                System.IAsyncResult _result = base.BeginInvoke("GetRunDetail", _args, callback, asyncState);
                return _result;
            }
            
            public m.transport.Asmx.ArrayOfXElement EndGetRunDetail(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                m.transport.Asmx.ArrayOfXElement _result = ((m.transport.Asmx.ArrayOfXElement)(base.EndInvoke("GetRunDetail", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDamageCodeList(string pDriver, string pPassword, string pTruck, string pHandheldID, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[4];
                _args[0] = pDriver;
                _args[1] = pPassword;
                _args[2] = pTruck;
                _args[3] = pHandheldID;
                System.IAsyncResult _result = base.BeginInvoke("GetDamageCodeList", _args, callback, asyncState);
                return _result;
            }
            
            public m.transport.Asmx.ArrayOfXElement EndGetDamageCodeList(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                m.transport.Asmx.ArrayOfXElement _result = ((m.transport.Asmx.ArrayOfXElement)(base.EndInvoke("GetDamageCodeList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginrefreshDamageAreaAndcode(string pDriver, string pPassword, string pTruck, System.DateTime pDamageTypeAndLocationSyncDate, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[4];
                _args[0] = pDriver;
                _args[1] = pPassword;
                _args[2] = pTruck;
                _args[3] = pDamageTypeAndLocationSyncDate;
                System.IAsyncResult _result = base.BeginInvoke("refreshDamageAreaAndcode", _args, callback, asyncState);
                return _result;
            }
            
            public m.transport.Asmx.ArrayOfXElement EndrefreshDamageAreaAndcode(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                m.transport.Asmx.ArrayOfXElement _result = ((m.transport.Asmx.ArrayOfXElement)(base.EndInvoke("refreshDamageAreaAndcode", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetExpenseTypeList(string pDriver, string pPassword, string pTruck, string pHandheldID, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[4];
                _args[0] = pDriver;
                _args[1] = pPassword;
                _args[2] = pTruck;
                _args[3] = pHandheldID;
                System.IAsyncResult _result = base.BeginInvoke("GetExpenseTypeList", _args, callback, asyncState);
                return _result;
            }
            
            public m.transport.Asmx.ArrayOfXElement EndGetExpenseTypeList(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                m.transport.Asmx.ArrayOfXElement _result = ((m.transport.Asmx.ArrayOfXElement)(base.EndInvoke("GetExpenseTypeList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetReasonList(string pDriver, string pPassword, string pTruck, string pHandheldID, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[4];
                _args[0] = pDriver;
                _args[1] = pPassword;
                _args[2] = pTruck;
                _args[3] = pHandheldID;
                System.IAsyncResult _result = base.BeginInvoke("GetReasonList", _args, callback, asyncState);
                return _result;
            }
            
            public m.transport.Asmx.ArrayOfXElement EndGetReasonList(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                m.transport.Asmx.ArrayOfXElement _result = ((m.transport.Asmx.ArrayOfXElement)(base.EndInvoke("GetReasonList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUnpaidExpenseList(string pDriver, string pPassword, string pTruck, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[3];
                _args[0] = pDriver;
                _args[1] = pPassword;
                _args[2] = pTruck;
                System.IAsyncResult _result = base.BeginInvoke("GetUnpaidExpenseList", _args, callback, asyncState);
                return _result;
            }
            
            public m.transport.Asmx.ArrayOfXElement EndGetUnpaidExpenseList(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                m.transport.Asmx.ArrayOfXElement _result = ((m.transport.Asmx.ArrayOfXElement)(base.EndInvoke("GetUnpaidExpenseList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSendExpense(string pDriver, string pPassword, string pTruck, m.transport.Asmx.ArrayOfXElement pExpense, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[4];
                _args[0] = pDriver;
                _args[1] = pPassword;
                _args[2] = pTruck;
                _args[3] = pExpense;
                System.IAsyncResult _result = base.BeginInvoke("SendExpense", _args, callback, asyncState);
                return _result;
            }
            
            public m.transport.Asmx.ArrayOfXElement EndSendExpense(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                m.transport.Asmx.ArrayOfXElement _result = ((m.transport.Asmx.ArrayOfXElement)(base.EndInvoke("SendExpense", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSendExceptionResponse(string pDriver, string pPassword, string pTruck, m.transport.Asmx.ArrayOfXElement pExceptionResponse, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[4];
                _args[0] = pDriver;
                _args[1] = pPassword;
                _args[2] = pTruck;
                _args[3] = pExceptionResponse;
                System.IAsyncResult _result = base.BeginInvoke("SendExceptionResponse", _args, callback, asyncState);
                return _result;
            }
            
            public m.transport.Asmx.ArrayOfXElement EndSendExceptionResponse(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                m.transport.Asmx.ArrayOfXElement _result = ((m.transport.Asmx.ArrayOfXElement)(base.EndInvoke("SendExceptionResponse", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginVerifyVIN(string pDriver, string pPassword, string pTruck, string pVIN, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[4];
                _args[0] = pDriver;
                _args[1] = pPassword;
                _args[2] = pTruck;
                _args[3] = pVIN;
                System.IAsyncResult _result = base.BeginInvoke("VerifyVIN", _args, callback, asyncState);
                return _result;
            }
            
            public m.transport.Asmx.ArrayOfXElement EndVerifyVIN(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                m.transport.Asmx.ArrayOfXElement _result = ((m.transport.Asmx.ArrayOfXElement)(base.EndInvoke("VerifyVIN", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSendDriverSignature(m.transport.Asmx.SendDriverSignatureRequest request, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("SendDriverSignature", _args, callback, asyncState);
                return _result;
            }
            
            public m.transport.Asmx.SendDriverSignatureResponse EndSendDriverSignature(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                m.transport.Asmx.SendDriverSignatureResponse _result = ((m.transport.Asmx.SendDriverSignatureResponse)(base.EndInvoke("SendDriverSignature", _args, result)));
                return _result;
            }
        }
    }
    
    [System.Xml.Serialization.XmlSchemaProviderAttribute(null, IsAny=true)]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("SlSvcUtil", "5.0.0.0")]
    public partial class ArrayOfXElement : object, System.Xml.Serialization.IXmlSerializable
    {
        
        private System.Collections.Generic.List<System.Xml.Linq.XElement> nodesList = new System.Collections.Generic.List<System.Xml.Linq.XElement>();
        
        public ArrayOfXElement()
        {
        }
        
        public virtual System.Collections.Generic.List<System.Xml.Linq.XElement> Nodes
        {
            get
            {
                return this.nodesList;
            }
        }
        
        public virtual System.Xml.Schema.XmlSchema GetSchema()
        {
            throw new System.NotImplementedException();
        }
        
        public virtual void WriteXml(System.Xml.XmlWriter writer)
        {
            System.Collections.Generic.IEnumerator<System.Xml.Linq.XElement> e = nodesList.GetEnumerator();
            for (
            ; e.MoveNext(); 
            )
            {
                ((System.Xml.Serialization.IXmlSerializable)(e.Current)).WriteXml(writer);
            }
        }
        
        public virtual void ReadXml(System.Xml.XmlReader reader)
        {
            for (
            ; (reader.NodeType != System.Xml.XmlNodeType.EndElement); 
            )
            {
                if ((reader.NodeType == System.Xml.XmlNodeType.Element))
                {
                    System.Xml.Linq.XElement elem = new System.Xml.Linq.XElement("default");
                    ((System.Xml.Serialization.IXmlSerializable)(elem)).ReadXml(reader);
                    Nodes.Add(elem);
                }
                else
                {
                    reader.Skip();
                }
            }
        }
    }
}
