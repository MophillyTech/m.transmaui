//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by SlSvcUtil, version 3.7.0.0
// 

using DAI;
using m.transport.Domain;
using m.transport.ServiceInterface;
using Expense = m.transport.ServiceInterface.Expense;

namespace m.transport.Svc
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.mophilly.com", ConfigurationName="m.transport.Svc.ITransportService")]
    public interface ITransportService
    {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mophilly.com/ITransportService/Version", ReplyAction="http://www.mophilly.com/ITransportService/VersionResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginVersion(System.AsyncCallback callback, object asyncState);
        
        string EndVersion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mophilly.com/ITransportService/Connected", ReplyAction="http://www.mophilly.com/ITransportService/ConnectedResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginConnected(System.AsyncCallback callback, object asyncState);
        
        bool EndConnected(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mophilly.com/ITransportService/ServerTime", ReplyAction="http://www.mophilly.com/ITransportService/ServerTimeResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginServerTime(System.AsyncCallback callback, object asyncState);
        
        string EndServerTime(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mophilly.com/ITransportService/Login", ReplyAction="http://www.mophilly.com/ITransportService/LoginResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
		[System.ServiceModel.FaultContractAttribute(typeof(TruckInfo), Action = "http://www.mophilly.com/ITransportService/LoginTruckInfoFault", Name = "TruckInfo", Namespace = "http://www.datacapturesolutions.net/")]
		System.IAsyncResult BeginLogin(string pDriver, string pPassword, string pTruck, System.AsyncCallback callback, object asyncState);
        
        LoginResult EndLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mophilly.com/ITransportService/GetMileageDetails", ReplyAction="http://www.mophilly.com/ITransportService/GetMileageDetailsResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetMileageDetails(string pNewTruck, System.AsyncCallback callback, object asyncState);
        
        MileageResult EndGetMileageDetails(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mophilly.com/ITransportService/UpdateTruck", ReplyAction="http://www.mophilly.com/ITransportService/UpdateTruckResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginUpdateTruck(string pDriver, string pPassword, string pTruck, string pNewTruck, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateTruck(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mophilly.com/ITransportService/UpdateOdometer", ReplyAction="http://www.mophilly.com/ITransportService/UpdateOdometerResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginUpdateOdometer(string pDriver, string pPassword, string pTruck, string pOdometer, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateOdometer(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mophilly.com/ITransportService/GetDriverID", ReplyAction="http://www.mophilly.com/ITransportService/GetDriverIDResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetDriverID(string pDriver, string pPassword, string pTruck, System.AsyncCallback callback, object asyncState);
        
        m.transport.Svc.ArrayOfXElement EndGetDriverID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mophilly.com/ITransportService/GetRunList", ReplyAction="http://www.mophilly.com/ITransportService/GetRunListResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetRunList(string pDriver, string pPassword, string pTruck, System.AsyncCallback callback, object asyncState);
        
        GetRunListResult EndGetRunList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mophilly.com/ITransportService/GetRunDetail", ReplyAction="http://www.mophilly.com/ITransportService/GetRunDetailResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetRunDetail(string pDriver, string pPassword, string pTruck, string pRunID, System.AsyncCallback callback, object asyncState);
        
        GetRunDetailResult EndGetRunDetail(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mophilly.com/ITransportService/GetDamageCodeList", ReplyAction="http://www.mophilly.com/ITransportService/GetDamageCodeListResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetDamageCodeList(string pDriver, string pPassword, string pTruck, string pHandheldID, System.AsyncCallback callback, object asyncState);
        
        DamageCodes EndGetDamageCodeList(System.IAsyncResult result);

		[System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mophilly.com/ITransportService/GetCodes", ReplyAction="http://www.mophilly.com/ITransportService/GetCodesResponse")]
		[System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
		System.IAsyncResult BeginGetCodes(string pDriver, string pPassword, string pTruck, string codeTypes, System.AsyncCallback callback, object asyncState);

		Code[] EndGetCodes(System.IAsyncResult result);

        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mophilly.com/ITransportService/refreshDamageAreaAndcode", ReplyAction="http://www.mophilly.com/ITransportService/refreshDamageAreaAndcodeResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginrefreshDamageAreaAndcode(string pDriver, string pPassword, string pTruck, System.DateTime pDamageTypeAndLocationSyncDate, System.AsyncCallback callback, object asyncState);
        
        m.transport.Svc.ArrayOfXElement EndrefreshDamageAreaAndcode(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mophilly.com/ITransportService/GetExpenseTypeList", ReplyAction="http://www.mophilly.com/ITransportService/GetExpenseTypeListResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetExpenseTypeList(string pDriver, string pPassword, string pTruck, string pHandheldID, System.AsyncCallback callback, object asyncState);
        
        m.transport.Svc.ArrayOfXElement EndGetExpenseTypeList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mophilly.com/ITransportService/GetReasonList", ReplyAction="http://www.mophilly.com/ITransportService/GetReasonListResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetReasonList(string pDriver, string pPassword, string pTruck, string pHandheldID, System.AsyncCallback callback, object asyncState);
        
        m.transport.Svc.ArrayOfXElement EndGetReasonList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mophilly.com/ITransportService/GetUnpaidExpenseList", ReplyAction="http://www.mophilly.com/ITransportService/GetUnpaidExpenseListResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetUnpaidExpenseList(string pDriver, string pPassword, string pTruck, System.AsyncCallback callback, object asyncState);
        
        m.transport.Svc.ArrayOfXElement EndGetUnpaidExpenseList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mophilly.com/ITransportService/SendExpense", ReplyAction="http://www.mophilly.com/ITransportService/SendExpenseResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginSendExpense(string pDriver, string pPassword, string pTruck, m.transport.Domain.Expense expense, System.AsyncCallback callback, object asyncState);
        
        m.transport.Svc.ArrayOfXElement EndSendExpense(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mophilly.com/ITransportService/SendExceptionResponse", ReplyAction="http://www.mophilly.com/ITransportService/SendExceptionResponseResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginSendExceptionResponse(string pDriver, string pPassword, string pTruck, m.transport.Svc.ArrayOfXElement pExceptionResponse, System.AsyncCallback callback, object asyncState);
        
        m.transport.Svc.ArrayOfXElement EndSendExceptionResponse(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mophilly.com/ITransportService/VerifyVIN", ReplyAction="http://www.mophilly.com/ITransportService/VerifyVINResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginVerifyVIN(string pDriver, string pPassword, string pTruck, string pVIN, System.AsyncCallback callback, object asyncState);
        
        m.transport.Svc.ArrayOfXElement EndVerifyVIN(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mophilly.com/ITransportService/SendDriverSignature", ReplyAction="http://www.mophilly.com/ITransportService/SendDriverSignatureResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginSendDriverSignature(string pDriver, string pPassword, string pTruck, DeliverySignature signature, System.AsyncCallback callback, object asyncState);
        
        void EndSendDriverSignature(System.IAsyncResult result);
        
		[System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mophilly.com/ITransportService/SendDamagePhotos", ReplyAction="http://www.mophilly.com/ITransportService/SendDamagePhotosResponse")]
		[System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
		System.IAsyncResult BeginSendDamagePhotos (string pDriver, string pPassword, string pTruck, DamagePhoto[] photos, System.AsyncCallback callback, object asyncState);

		void EndSendDamagePhotos (System.IAsyncResult result);

		//
		[System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mophilly.com/ITransportService/LogMobileDevice", ReplyAction="http://www.mophilly.com/ITransportService/LogMobileDeviceResponse")]
		[System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
		System.IAsyncResult BeginLogMobileDevice (MobileDevice device, System.AsyncCallback callback, object asyncState);

		void EndLogMobileDevice (System.IAsyncResult result);
		//

        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mophilly.com/ITransportService/GetDriverSignature", ReplyAction="http://www.mophilly.com/ITransportService/GetDriverSignatureResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetDriverSignature(m.transport.Svc.GetDriverSignatureRequest request, System.AsyncCallback callback, object asyncState);
        
        m.transport.Svc.GetDriverSignatureResponse EndGetDriverSignature(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mophilly.com/ITransportService/GetLatestReleaseVersion", ReplyAction="http://www.mophilly.com/ITransportService/GetLatestReleaseVersionResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetLatestReleaseVersion(string appVersion, string inspectorCode, string inspectorName, string handHeldID, string localTime, string localTimeZone, System.AsyncCallback callback, object asyncState);
        
        string EndGetLatestReleaseVersion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mophilly.com/ITransportService/DownloadRelease", ReplyAction="http://www.mophilly.com/ITransportService/DownloadReleaseResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginDownloadRelease(string appVersion, string inspectorCode, string inspectorName, string handHeldID, string localTime, string localTimeZone, string version, int currentPosition, int chunckSize, System.AsyncCallback callback, object asyncState);
        
        DAIFileDetails EndDownloadRelease(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mophilly.com/ITransportService/GetCurrentLoad", ReplyAction="http://www.mophilly.com/ITransportService/GetCurrentLoadResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
		System.IAsyncResult BeginGetCurrentLoad(string pDriver, string pPassword, string pTruck, bool clearExceptions, string returnLoad, System.AsyncCallback callback, object asyncState);
        
        CurrentLoadResult EndGetCurrentLoad(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mophilly.com/ITransportService/UploadCurrentLoad", ReplyAction="http://www.mophilly.com/ITransportService/UploadCurrentLoadResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginUploadCurrentLoad(string pDriver, string pPassword, string pTruck, CurrentLoadUpdate pCurrentLoad, System.AsyncCallback callback, object asyncState);
        
        void EndUploadCurrentLoad(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mophilly.com/ITransportService/ResetUser", ReplyAction="http://www.mophilly.com/ITransportService/ResetUserResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginResetUser(string pDriver, string pPassword, System.AsyncCallback callback, object asyncState);
        
        void EndResetUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.mophilly.com/ITransportService/GetMobileSettings", ReplyAction="http://www.mophilly.com/ITransportService/GetMobileSettingsResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetMobileSettings(System.AsyncCallback callback, object asyncState);
        
        MobileSettingsResult EndGetMobileSettings(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetDriverSignature", WrapperNamespace="http://www.mophilly.com", IsWrapped=true)]
    public partial class GetDriverSignatureRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.mophilly.com", Order=0)]
        public string pDriver;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.mophilly.com", Order=1)]
        public string pPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.mophilly.com", Order=2)]
        public string pTruck;
        
        public GetDriverSignatureRequest()
        {
        }
        
        public GetDriverSignatureRequest(string pDriver, string pPassword, string pTruck)
        {
            this.pDriver = pDriver;
            this.pPassword = pPassword;
            this.pTruck = pTruck;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetDriverSignatureResponse", WrapperNamespace="http://www.mophilly.com", IsWrapped=true)]
    public partial class GetDriverSignatureResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.mophilly.com", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetDriverSignatureResult;
        
        public GetDriverSignatureResponse()
        {
        }
        
        public GetDriverSignatureResponse(byte[] GetDriverSignatureResult)
        {
            this.GetDriverSignatureResult = GetDriverSignatureResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITransportServiceChannel : m.transport.Svc.ITransportService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class VersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public VersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public string Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConnectedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public ConnectedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public bool Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServerTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public ServerTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public string Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public LoginResult Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((LoginResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMileageDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public GetMileageDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public MileageResult Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((MileageResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDriverIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public GetDriverIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public m.transport.Svc.ArrayOfXElement Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((m.transport.Svc.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRunListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public GetRunListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public GetRunListResult Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((GetRunListResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRunDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public GetRunDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public GetRunDetailResult Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((GetRunDetailResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDamageCodeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public GetDamageCodeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public DamageCodes Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((DamageCodes)(this.results[0]));
            }
        }
    }

	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
	public partial class GetCodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		public GetCodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
		base(exception, cancelled, userState)
		{
			this.results = results;
		}

		public Code[] Result
		{
			get
			{
				base.RaiseExceptionIfNecessary();
				return ((Code[])(this.results[0]));
			}
		}
	}


    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class refreshDamageAreaAndcodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public refreshDamageAreaAndcodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public m.transport.Svc.ArrayOfXElement Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((m.transport.Svc.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetExpenseTypeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public GetExpenseTypeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public m.transport.Svc.ArrayOfXElement Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((m.transport.Svc.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetReasonListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public GetReasonListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public m.transport.Svc.ArrayOfXElement Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((m.transport.Svc.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUnpaidExpenseListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public GetUnpaidExpenseListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public m.transport.Svc.ArrayOfXElement Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((m.transport.Svc.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendExpenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public SendExpenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public m.transport.Svc.ArrayOfXElement Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((m.transport.Svc.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendExceptionResponseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public SendExceptionResponseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public m.transport.Svc.ArrayOfXElement Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((m.transport.Svc.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class VerifyVINCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public VerifyVINCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public m.transport.Svc.ArrayOfXElement Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((m.transport.Svc.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDriverSignatureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public GetDriverSignatureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public byte[] Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLatestReleaseVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public GetLatestReleaseVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public string Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DownloadReleaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public DownloadReleaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public DAIFileDetails Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((DAIFileDetails)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCurrentLoadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public GetCurrentLoadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public CurrentLoadResultV2 Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((CurrentLoadResultV2)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMobileSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public GetMobileSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public MobileSettingsResult Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((MobileSettingsResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TransportServiceClient : System.ServiceModel.ClientBase<m.transport.Svc.ITransportService>, m.transport.Svc.ITransportService
    {
        
        private BeginOperationDelegate onBeginVersionDelegate;
        
        private EndOperationDelegate onEndVersionDelegate;
        
        private System.Threading.SendOrPostCallback onVersionCompletedDelegate;
        
        private BeginOperationDelegate onBeginConnectedDelegate;
        
        private EndOperationDelegate onEndConnectedDelegate;
        
        private System.Threading.SendOrPostCallback onConnectedCompletedDelegate;
        
        private BeginOperationDelegate onBeginServerTimeDelegate;
        
        private EndOperationDelegate onEndServerTimeDelegate;
        
        private System.Threading.SendOrPostCallback onServerTimeCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoginDelegate;
        
        private EndOperationDelegate onEndLoginDelegate;
        
        private System.Threading.SendOrPostCallback onLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMileageDetailsDelegate;
        
        private EndOperationDelegate onEndGetMileageDetailsDelegate;
        
        private System.Threading.SendOrPostCallback onGetMileageDetailsCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateTruckDelegate;
        
        private EndOperationDelegate onEndUpdateTruckDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateTruckCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateOdometerDelegate;
        
        private EndOperationDelegate onEndUpdateOdometerDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateOdometerCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDriverIDDelegate;
        
        private EndOperationDelegate onEndGetDriverIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetDriverIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRunListDelegate;
        
        private EndOperationDelegate onEndGetRunListDelegate;
        
        private System.Threading.SendOrPostCallback onGetRunListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRunDetailDelegate;
        
        private EndOperationDelegate onEndGetRunDetailDelegate;
        
        private System.Threading.SendOrPostCallback onGetRunDetailCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDamageCodeListDelegate;
        
        private EndOperationDelegate onEndGetDamageCodeListDelegate;
        
        private System.Threading.SendOrPostCallback onGetDamageCodeListCompletedDelegate;

		private BeginOperationDelegate onBeginGetCodesDelegate;

		private EndOperationDelegate onEndGetCodesDelegate;

		private System.Threading.SendOrPostCallback onGetCodesCompletedDelegate;

        private BeginOperationDelegate onBeginrefreshDamageAreaAndcodeDelegate;
        
        private EndOperationDelegate onEndrefreshDamageAreaAndcodeDelegate;
        
        private System.Threading.SendOrPostCallback onrefreshDamageAreaAndcodeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetExpenseTypeListDelegate;
        
        private EndOperationDelegate onEndGetExpenseTypeListDelegate;
        
        private System.Threading.SendOrPostCallback onGetExpenseTypeListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetReasonListDelegate;
        
        private EndOperationDelegate onEndGetReasonListDelegate;
        
        private System.Threading.SendOrPostCallback onGetReasonListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUnpaidExpenseListDelegate;
        
        private EndOperationDelegate onEndGetUnpaidExpenseListDelegate;
        
        private System.Threading.SendOrPostCallback onGetUnpaidExpenseListCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendExpenseDelegate;
        
        private EndOperationDelegate onEndSendExpenseDelegate;
        
        private System.Threading.SendOrPostCallback onSendExpenseCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendExceptionResponseDelegate;
        
        private EndOperationDelegate onEndSendExceptionResponseDelegate;
        
        private System.Threading.SendOrPostCallback onSendExceptionResponseCompletedDelegate;
        
        private BeginOperationDelegate onBeginVerifyVINDelegate;
        
        private EndOperationDelegate onEndVerifyVINDelegate;
        
        private System.Threading.SendOrPostCallback onVerifyVINCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendDriverSignatureDelegate;
        
        private EndOperationDelegate onEndSendDriverSignatureDelegate;
        
        private System.Threading.SendOrPostCallback onSendDriverSignatureCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendDamagePhotosDelegate;
        
        private EndOperationDelegate onEndSendDamagePhotosDelegate;
        
        private System.Threading.SendOrPostCallback onSendDamagePhotosCompletedDelegate;

		//
		private BeginOperationDelegate onBeginLogMobileDeviceDelegate;

		private EndOperationDelegate onEndLogMobileDeviceDelegate;

		private System.Threading.SendOrPostCallback onLogMobileDeviceCompletedDelegate;
		//

        private BeginOperationDelegate onBeginGetDriverSignatureDelegate;
        
        private EndOperationDelegate onEndGetDriverSignatureDelegate;
        
        private System.Threading.SendOrPostCallback onGetDriverSignatureCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLatestReleaseVersionDelegate;
        
        private EndOperationDelegate onEndGetLatestReleaseVersionDelegate;
        
        private System.Threading.SendOrPostCallback onGetLatestReleaseVersionCompletedDelegate;
        
        private BeginOperationDelegate onBeginDownloadReleaseDelegate;
        
        private EndOperationDelegate onEndDownloadReleaseDelegate;
        
        private System.Threading.SendOrPostCallback onDownloadReleaseCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCurrentLoadDelegate;
        
        private EndOperationDelegate onEndGetCurrentLoadDelegate;
        
        private System.Threading.SendOrPostCallback onGetCurrentLoadCompletedDelegate;
        
        private BeginOperationDelegate onBeginUploadCurrentLoadDelegate;
        
        private EndOperationDelegate onEndUploadCurrentLoadDelegate;
        
        private System.Threading.SendOrPostCallback onUploadCurrentLoadCompletedDelegate;
        
        private BeginOperationDelegate onBeginResetUserDelegate;
        
        private EndOperationDelegate onEndResetUserDelegate;
        
        private System.Threading.SendOrPostCallback onResetUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMobileSettingsDelegate;
        
        private EndOperationDelegate onEndGetMobileSettingsDelegate;
        
        private System.Threading.SendOrPostCallback onGetMobileSettingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public TransportServiceClient()
        {
        }
        
        public TransportServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName)
        {
        }
        
        public TransportServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public TransportServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public TransportServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Net.CookieContainer CookieContainer
        {
            get
            {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null))
                {
                    return httpCookieContainerManager.CookieContainer;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null))
                {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else
                {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<VersionCompletedEventArgs> VersionCompleted;
        
        public event System.EventHandler<ConnectedCompletedEventArgs> ConnectedCompleted;
        
        public event System.EventHandler<ServerTimeCompletedEventArgs> ServerTimeCompleted;
        
        public event System.EventHandler<LoginCompletedEventArgs> LoginCompleted;
        
        public event System.EventHandler<GetMileageDetailsCompletedEventArgs> GetMileageDetailsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateTruckCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateOdometerCompleted;
        
        public event System.EventHandler<GetDriverIDCompletedEventArgs> GetDriverIDCompleted;
        
        public event System.EventHandler<GetRunListCompletedEventArgs> GetRunListCompleted;
        
        public event System.EventHandler<GetRunDetailCompletedEventArgs> GetRunDetailCompleted;
        
        public event System.EventHandler<GetDamageCodeListCompletedEventArgs> GetDamageCodeListCompleted;

		public event System.EventHandler<GetCodesCompletedEventArgs> GetCodesCompleted;
        
        public event System.EventHandler<refreshDamageAreaAndcodeCompletedEventArgs> refreshDamageAreaAndcodeCompleted;
        
        public event System.EventHandler<GetExpenseTypeListCompletedEventArgs> GetExpenseTypeListCompleted;
        
        public event System.EventHandler<GetReasonListCompletedEventArgs> GetReasonListCompleted;
        
        public event System.EventHandler<GetUnpaidExpenseListCompletedEventArgs> GetUnpaidExpenseListCompleted;
        
        public event System.EventHandler<SendExpenseCompletedEventArgs> SendExpenseCompleted;
        
        public event System.EventHandler<SendExceptionResponseCompletedEventArgs> SendExceptionResponseCompleted;
        
        public event System.EventHandler<VerifyVINCompletedEventArgs> VerifyVINCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SendDriverSignatureCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SendDamagePhotosCompleted;
        
		//
		public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LogMobileDeviceCompleted;
		//

        public event System.EventHandler<GetDriverSignatureCompletedEventArgs> GetDriverSignatureCompleted;
        
        public event System.EventHandler<GetLatestReleaseVersionCompletedEventArgs> GetLatestReleaseVersionCompleted;
        
        public event System.EventHandler<DownloadReleaseCompletedEventArgs> DownloadReleaseCompleted;
        
        public event System.EventHandler<GetCurrentLoadCompletedEventArgs> GetCurrentLoadCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UploadCurrentLoadCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ResetUserCompleted;
        
        public event System.EventHandler<GetMobileSettingsCompletedEventArgs> GetMobileSettingsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Svc.ITransportService.BeginVersion(System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginVersion(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string m.transport.Svc.ITransportService.EndVersion(System.IAsyncResult result)
        {
            return base.Channel.EndVersion(result);
        }
        
        private System.IAsyncResult OnBeginVersion(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            return ((m.transport.Svc.ITransportService)(this)).BeginVersion(callback, asyncState);
        }
        
        private object[] OnEndVersion(System.IAsyncResult result)
        {
            string retVal = ((m.transport.Svc.ITransportService)(this)).EndVersion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnVersionCompleted(object state)
        {
            if ((this.VersionCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.VersionCompleted(this, new VersionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void VersionAsync()
        {
            this.VersionAsync(null);
        }
        
        public void VersionAsync(object userState)
        {
            if ((this.onBeginVersionDelegate == null))
            {
                this.onBeginVersionDelegate = new BeginOperationDelegate(this.OnBeginVersion);
            }
            if ((this.onEndVersionDelegate == null))
            {
                this.onEndVersionDelegate = new EndOperationDelegate(this.OnEndVersion);
            }
            if ((this.onVersionCompletedDelegate == null))
            {
                this.onVersionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnVersionCompleted);
            }
            base.InvokeAsync(this.onBeginVersionDelegate, null, this.onEndVersionDelegate, this.onVersionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Svc.ITransportService.BeginConnected(System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginConnected(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool m.transport.Svc.ITransportService.EndConnected(System.IAsyncResult result)
        {
            return base.Channel.EndConnected(result);
        }
        
        private System.IAsyncResult OnBeginConnected(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            return ((m.transport.Svc.ITransportService)(this)).BeginConnected(callback, asyncState);
        }
        
        private object[] OnEndConnected(System.IAsyncResult result)
        {
            bool retVal = ((m.transport.Svc.ITransportService)(this)).EndConnected(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConnectedCompleted(object state)
        {
            if ((this.ConnectedCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConnectedCompleted(this, new ConnectedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConnectedAsync()
        {
            this.ConnectedAsync(null);
        }
        
        public void ConnectedAsync(object userState)
        {
            if ((this.onBeginConnectedDelegate == null))
            {
                this.onBeginConnectedDelegate = new BeginOperationDelegate(this.OnBeginConnected);
            }
            if ((this.onEndConnectedDelegate == null))
            {
                this.onEndConnectedDelegate = new EndOperationDelegate(this.OnEndConnected);
            }
            if ((this.onConnectedCompletedDelegate == null))
            {
                this.onConnectedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConnectedCompleted);
            }
            base.InvokeAsync(this.onBeginConnectedDelegate, null, this.onEndConnectedDelegate, this.onConnectedCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Svc.ITransportService.BeginServerTime(System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginServerTime(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string m.transport.Svc.ITransportService.EndServerTime(System.IAsyncResult result)
        {
            return base.Channel.EndServerTime(result);
        }
        
        private System.IAsyncResult OnBeginServerTime(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            return ((m.transport.Svc.ITransportService)(this)).BeginServerTime(callback, asyncState);
        }
        
        private object[] OnEndServerTime(System.IAsyncResult result)
        {
            string retVal = ((m.transport.Svc.ITransportService)(this)).EndServerTime(result);
            return new object[] {
                    retVal};
        }
        
        private void OnServerTimeCompleted(object state)
        {
            if ((this.ServerTimeCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ServerTimeCompleted(this, new ServerTimeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ServerTimeAsync()
        {
            this.ServerTimeAsync(null);
        }
        
        public void ServerTimeAsync(object userState)
        {
            if ((this.onBeginServerTimeDelegate == null))
            {
                this.onBeginServerTimeDelegate = new BeginOperationDelegate(this.OnBeginServerTime);
            }
            if ((this.onEndServerTimeDelegate == null))
            {
                this.onEndServerTimeDelegate = new EndOperationDelegate(this.OnEndServerTime);
            }
            if ((this.onServerTimeCompletedDelegate == null))
            {
                this.onServerTimeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnServerTimeCompleted);
            }
            base.InvokeAsync(this.onBeginServerTimeDelegate, null, this.onEndServerTimeDelegate, this.onServerTimeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Svc.ITransportService.BeginLogin(string pDriver, string pPassword, string pTruck, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginLogin(pDriver, pPassword, pTruck, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LoginResult m.transport.Svc.ITransportService.EndLogin(System.IAsyncResult result)
        {
            return base.Channel.EndLogin(result);
        }
        
        private System.IAsyncResult OnBeginLogin(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            return ((m.transport.Svc.ITransportService)(this)).BeginLogin(pDriver, pPassword, pTruck, callback, asyncState);
        }
        
        private object[] OnEndLogin(System.IAsyncResult result)
        {
            LoginResult retVal = ((m.transport.Svc.ITransportService)(this)).EndLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoginCompleted(object state)
        {
            if ((this.LoginCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginCompleted(this, new LoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginAsync(string pDriver, string pPassword, string pTruck)
        {
            this.LoginAsync(pDriver, pPassword, pTruck, null);
        }
        
        public void LoginAsync(string pDriver, string pPassword, string pTruck, object userState)
        {
            if ((this.onBeginLoginDelegate == null))
            {
                this.onBeginLoginDelegate = new BeginOperationDelegate(this.OnBeginLogin);
            }
            if ((this.onEndLoginDelegate == null))
            {
                this.onEndLoginDelegate = new EndOperationDelegate(this.OnEndLogin);
            }
            if ((this.onLoginCompletedDelegate == null))
            {
                this.onLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            base.InvokeAsync(this.onBeginLoginDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck}, this.onEndLoginDelegate, this.onLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Svc.ITransportService.BeginGetMileageDetails(string pNewTruck, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetMileageDetails(pNewTruck, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MileageResult m.transport.Svc.ITransportService.EndGetMileageDetails(System.IAsyncResult result)
        {
            return base.Channel.EndGetMileageDetails(result);
        }
        
        private System.IAsyncResult OnBeginGetMileageDetails(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pNewTruck = ((string)(inValues[0]));
            return ((m.transport.Svc.ITransportService)(this)).BeginGetMileageDetails(pNewTruck, callback, asyncState);
        }
        
        private object[] OnEndGetMileageDetails(System.IAsyncResult result)
        {
            MileageResult retVal = ((m.transport.Svc.ITransportService)(this)).EndGetMileageDetails(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMileageDetailsCompleted(object state)
        {
            if ((this.GetMileageDetailsCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMileageDetailsCompleted(this, new GetMileageDetailsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMileageDetailsAsync(string pNewTruck)
        {
            this.GetMileageDetailsAsync(pNewTruck, null);
        }
        
        public void GetMileageDetailsAsync(string pNewTruck, object userState)
        {
            if ((this.onBeginGetMileageDetailsDelegate == null))
            {
                this.onBeginGetMileageDetailsDelegate = new BeginOperationDelegate(this.OnBeginGetMileageDetails);
            }
            if ((this.onEndGetMileageDetailsDelegate == null))
            {
                this.onEndGetMileageDetailsDelegate = new EndOperationDelegate(this.OnEndGetMileageDetails);
            }
            if ((this.onGetMileageDetailsCompletedDelegate == null))
            {
                this.onGetMileageDetailsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMileageDetailsCompleted);
            }
            base.InvokeAsync(this.onBeginGetMileageDetailsDelegate, new object[] {
                        pNewTruck}, this.onEndGetMileageDetailsDelegate, this.onGetMileageDetailsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Svc.ITransportService.BeginUpdateTruck(string pDriver, string pPassword, string pTruck, string pNewTruck, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginUpdateTruck(pDriver, pPassword, pTruck, pNewTruck, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void m.transport.Svc.ITransportService.EndUpdateTruck(System.IAsyncResult result)
        {
            base.Channel.EndUpdateTruck(result);
        }
        
        private System.IAsyncResult OnBeginUpdateTruck(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            string pNewTruck = ((string)(inValues[3]));
            return ((m.transport.Svc.ITransportService)(this)).BeginUpdateTruck(pDriver, pPassword, pTruck, pNewTruck, callback, asyncState);
        }
        
        private object[] OnEndUpdateTruck(System.IAsyncResult result)
        {
            ((m.transport.Svc.ITransportService)(this)).EndUpdateTruck(result);
            return null;
        }
        
        private void OnUpdateTruckCompleted(object state)
        {
            if ((this.UpdateTruckCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateTruckCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateTruckAsync(string pDriver, string pPassword, string pTruck, string pNewTruck)
        {
            this.UpdateTruckAsync(pDriver, pPassword, pTruck, pNewTruck, null);
        }
        
        public void UpdateTruckAsync(string pDriver, string pPassword, string pTruck, string pNewTruck, object userState)
        {
            if ((this.onBeginUpdateTruckDelegate == null))
            {
                this.onBeginUpdateTruckDelegate = new BeginOperationDelegate(this.OnBeginUpdateTruck);
            }
            if ((this.onEndUpdateTruckDelegate == null))
            {
                this.onEndUpdateTruckDelegate = new EndOperationDelegate(this.OnEndUpdateTruck);
            }
            if ((this.onUpdateTruckCompletedDelegate == null))
            {
                this.onUpdateTruckCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateTruckCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateTruckDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck,
                        pNewTruck}, this.onEndUpdateTruckDelegate, this.onUpdateTruckCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Svc.ITransportService.BeginUpdateOdometer(string pDriver, string pPassword, string pTruck, string pOdometer, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginUpdateOdometer(pDriver, pPassword, pTruck, pOdometer, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void m.transport.Svc.ITransportService.EndUpdateOdometer(System.IAsyncResult result)
        {
            base.Channel.EndUpdateOdometer(result);
        }
        
        private System.IAsyncResult OnBeginUpdateOdometer(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            string pOdometer = ((string)(inValues[3]));
            return ((m.transport.Svc.ITransportService)(this)).BeginUpdateOdometer(pDriver, pPassword, pTruck, pOdometer, callback, asyncState);
        }
        
        private object[] OnEndUpdateOdometer(System.IAsyncResult result)
        {
            ((m.transport.Svc.ITransportService)(this)).EndUpdateOdometer(result);
            return null;
        }
        
        private void OnUpdateOdometerCompleted(object state)
        {
            if ((this.UpdateOdometerCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateOdometerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateOdometerAsync(string pDriver, string pPassword, string pTruck, string pOdometer)
        {
            this.UpdateOdometerAsync(pDriver, pPassword, pTruck, pOdometer, null);
        }
        
        public void UpdateOdometerAsync(string pDriver, string pPassword, string pTruck, string pOdometer, object userState)
        {
            if ((this.onBeginUpdateOdometerDelegate == null))
            {
                this.onBeginUpdateOdometerDelegate = new BeginOperationDelegate(this.OnBeginUpdateOdometer);
            }
            if ((this.onEndUpdateOdometerDelegate == null))
            {
                this.onEndUpdateOdometerDelegate = new EndOperationDelegate(this.OnEndUpdateOdometer);
            }
            if ((this.onUpdateOdometerCompletedDelegate == null))
            {
                this.onUpdateOdometerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateOdometerCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateOdometerDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck,
                        pOdometer}, this.onEndUpdateOdometerDelegate, this.onUpdateOdometerCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Svc.ITransportService.BeginGetDriverID(string pDriver, string pPassword, string pTruck, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetDriverID(pDriver, pPassword, pTruck, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        m.transport.Svc.ArrayOfXElement m.transport.Svc.ITransportService.EndGetDriverID(System.IAsyncResult result)
        {
            return base.Channel.EndGetDriverID(result);
        }
        
        private System.IAsyncResult OnBeginGetDriverID(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            return ((m.transport.Svc.ITransportService)(this)).BeginGetDriverID(pDriver, pPassword, pTruck, callback, asyncState);
        }
        
        private object[] OnEndGetDriverID(System.IAsyncResult result)
        {
            m.transport.Svc.ArrayOfXElement retVal = ((m.transport.Svc.ITransportService)(this)).EndGetDriverID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDriverIDCompleted(object state)
        {
            if ((this.GetDriverIDCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDriverIDCompleted(this, new GetDriverIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDriverIDAsync(string pDriver, string pPassword, string pTruck)
        {
            this.GetDriverIDAsync(pDriver, pPassword, pTruck, null);
        }
        
        public void GetDriverIDAsync(string pDriver, string pPassword, string pTruck, object userState)
        {
            if ((this.onBeginGetDriverIDDelegate == null))
            {
                this.onBeginGetDriverIDDelegate = new BeginOperationDelegate(this.OnBeginGetDriverID);
            }
            if ((this.onEndGetDriverIDDelegate == null))
            {
                this.onEndGetDriverIDDelegate = new EndOperationDelegate(this.OnEndGetDriverID);
            }
            if ((this.onGetDriverIDCompletedDelegate == null))
            {
                this.onGetDriverIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDriverIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetDriverIDDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck}, this.onEndGetDriverIDDelegate, this.onGetDriverIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Svc.ITransportService.BeginGetRunList(string pDriver, string pPassword, string pTruck, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetRunList(pDriver, pPassword, pTruck, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        GetRunListResult m.transport.Svc.ITransportService.EndGetRunList(System.IAsyncResult result)
        {
            return base.Channel.EndGetRunList(result);
        }
        
        private System.IAsyncResult OnBeginGetRunList(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            return ((m.transport.Svc.ITransportService)(this)).BeginGetRunList(pDriver, pPassword, pTruck, callback, asyncState);
        }
        
        private object[] OnEndGetRunList(System.IAsyncResult result)
        {
            GetRunListResult retVal = ((m.transport.Svc.ITransportService)(this)).EndGetRunList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRunListCompleted(object state)
        {
            if ((this.GetRunListCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRunListCompleted(this, new GetRunListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRunListAsync(string pDriver, string pPassword, string pTruck)
        {
            this.GetRunListAsync(pDriver, pPassword, pTruck, null);
        }
        
        public void GetRunListAsync(string pDriver, string pPassword, string pTruck, object userState)
        {
            if ((this.onBeginGetRunListDelegate == null))
            {
                this.onBeginGetRunListDelegate = new BeginOperationDelegate(this.OnBeginGetRunList);
            }
            if ((this.onEndGetRunListDelegate == null))
            {
                this.onEndGetRunListDelegate = new EndOperationDelegate(this.OnEndGetRunList);
            }
            if ((this.onGetRunListCompletedDelegate == null))
            {
                this.onGetRunListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRunListCompleted);
            }
            base.InvokeAsync(this.onBeginGetRunListDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck}, this.onEndGetRunListDelegate, this.onGetRunListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Svc.ITransportService.BeginGetRunDetail(string pDriver, string pPassword, string pTruck, string pRunID, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetRunDetail(pDriver, pPassword, pTruck, pRunID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        GetRunDetailResult m.transport.Svc.ITransportService.EndGetRunDetail(System.IAsyncResult result)
        {
            return base.Channel.EndGetRunDetail(result);
        }
        
        private System.IAsyncResult OnBeginGetRunDetail(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            string pRunID = ((string)(inValues[3]));
            return ((m.transport.Svc.ITransportService)(this)).BeginGetRunDetail(pDriver, pPassword, pTruck, pRunID, callback, asyncState);
        }
        
        private object[] OnEndGetRunDetail(System.IAsyncResult result)
        {
            GetRunDetailResult retVal = ((m.transport.Svc.ITransportService)(this)).EndGetRunDetail(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRunDetailCompleted(object state)
        {
            if ((this.GetRunDetailCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRunDetailCompleted(this, new GetRunDetailCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRunDetailAsync(string pDriver, string pPassword, string pTruck, string pRunID)
        {
            this.GetRunDetailAsync(pDriver, pPassword, pTruck, pRunID, null);
        }
        
        public void GetRunDetailAsync(string pDriver, string pPassword, string pTruck, string pRunID, object userState)
        {
            if ((this.onBeginGetRunDetailDelegate == null))
            {
                this.onBeginGetRunDetailDelegate = new BeginOperationDelegate(this.OnBeginGetRunDetail);
            }
            if ((this.onEndGetRunDetailDelegate == null))
            {
                this.onEndGetRunDetailDelegate = new EndOperationDelegate(this.OnEndGetRunDetail);
            }
            if ((this.onGetRunDetailCompletedDelegate == null))
            {
                this.onGetRunDetailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRunDetailCompleted);
            }
            base.InvokeAsync(this.onBeginGetRunDetailDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck,
                        pRunID}, this.onEndGetRunDetailDelegate, this.onGetRunDetailCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Svc.ITransportService.BeginGetDamageCodeList(string pDriver, string pPassword, string pTruck, string pHandheldID, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetDamageCodeList(pDriver, pPassword, pTruck, pHandheldID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        DamageCodes m.transport.Svc.ITransportService.EndGetDamageCodeList(System.IAsyncResult result)
        {
            return base.Channel.EndGetDamageCodeList(result);
        }
        
        private System.IAsyncResult OnBeginGetDamageCodeList(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            string pHandheldID = ((string)(inValues[3]));
            return ((m.transport.Svc.ITransportService)(this)).BeginGetDamageCodeList(pDriver, pPassword, pTruck, pHandheldID, callback, asyncState);
        }
        
        private object[] OnEndGetDamageCodeList(System.IAsyncResult result)
        {
            DamageCodes retVal = ((m.transport.Svc.ITransportService)(this)).EndGetDamageCodeList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDamageCodeListCompleted(object state)
        {
            if ((this.GetDamageCodeListCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDamageCodeListCompleted(this, new GetDamageCodeListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDamageCodeListAsync(string pDriver, string pPassword, string pTruck, string pHandheldID)
        {
            this.GetDamageCodeListAsync(pDriver, pPassword, pTruck, pHandheldID, null);
        }
        
        public void GetDamageCodeListAsync(string pDriver, string pPassword, string pTruck, string pHandheldID, object userState)
        {
            if ((this.onBeginGetDamageCodeListDelegate == null))
            {
                this.onBeginGetDamageCodeListDelegate = new BeginOperationDelegate(this.OnBeginGetDamageCodeList);
            }
            if ((this.onEndGetDamageCodeListDelegate == null))
            {
                this.onEndGetDamageCodeListDelegate = new EndOperationDelegate(this.OnEndGetDamageCodeList);
            }
            if ((this.onGetDamageCodeListCompletedDelegate == null))
            {
                this.onGetDamageCodeListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDamageCodeListCompleted);
            }
            base.InvokeAsync(this.onBeginGetDamageCodeListDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck,
                        pHandheldID}, this.onEndGetDamageCodeListDelegate, this.onGetDamageCodeListCompletedDelegate, userState);
        }

		//

		[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
		System.IAsyncResult m.transport.Svc.ITransportService.BeginGetCodes(string pDriver, string pPassword, string pTruck, string codeTypes, System.AsyncCallback callback, object asyncState)
		{
			return base.Channel.BeginGetCodes(pDriver, pPassword, pTruck, codeTypes, callback, asyncState);
		}

		[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
		Code[] m.transport.Svc.ITransportService.EndGetCodes(System.IAsyncResult result)
		{
			return base.Channel.EndGetCodes(result);
		}

		private System.IAsyncResult OnBeginGetCodes(object[] inValues, System.AsyncCallback callback, object asyncState)
		{
			string pDriver = ((string)(inValues[0]));
			string pPassword = ((string)(inValues[1]));
			string pTruck = ((string)(inValues[2]));
			string codeTypes = ((string)(inValues[3]));
			return ((m.transport.Svc.ITransportService)(this)).BeginGetCodes(pDriver, pPassword, pTruck, codeTypes, callback, asyncState);
		}

		private object[] OnEndGetCodes(System.IAsyncResult result)
		{
			Code[] retVal = ((m.transport.Svc.ITransportService)(this)).EndGetCodes(result);
			return new object[] {
				retVal};
		}

		private void OnGetCodesCompleted(object state)
		{
			if ((this.GetCodesCompleted != null))
			{
				InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
				this.GetCodesCompleted(this, new GetCodesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
			}
		}

		public void GetCodesAsync(string pDriver, string pPassword, string pTruck, string codeTypes)
		{
			this.GetCodesAsync(pDriver, pPassword, pTruck, codeTypes, null);
		}

		public void GetCodesAsync(string pDriver, string pPassword, string pTruck, string codeTypes, object userState)
		{
			if ((this.onBeginGetCodesDelegate == null))
			{
				this.onBeginGetCodesDelegate = new BeginOperationDelegate(this.OnBeginGetCodes);
			}
			if ((this.onEndGetCodesDelegate == null))
			{
				this.onEndGetCodesDelegate = new EndOperationDelegate(this.OnEndGetCodes);
			}
			if ((this.onGetCodesCompletedDelegate == null))
			{
				this.onGetCodesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCodesCompleted);
			}
			base.InvokeAsync(this.onBeginGetCodesDelegate, new object[] {
				pDriver,
				pPassword,
				pTruck,
				codeTypes}, this.onEndGetCodesDelegate, this.onGetCodesCompletedDelegate, userState);
		}

		//

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Svc.ITransportService.BeginrefreshDamageAreaAndcode(string pDriver, string pPassword, string pTruck, System.DateTime pDamageTypeAndLocationSyncDate, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginrefreshDamageAreaAndcode(pDriver, pPassword, pTruck, pDamageTypeAndLocationSyncDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        m.transport.Svc.ArrayOfXElement m.transport.Svc.ITransportService.EndrefreshDamageAreaAndcode(System.IAsyncResult result)
        {
            return base.Channel.EndrefreshDamageAreaAndcode(result);
        }
        
        private System.IAsyncResult OnBeginrefreshDamageAreaAndcode(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            System.DateTime pDamageTypeAndLocationSyncDate = ((System.DateTime)(inValues[3]));
            return ((m.transport.Svc.ITransportService)(this)).BeginrefreshDamageAreaAndcode(pDriver, pPassword, pTruck, pDamageTypeAndLocationSyncDate, callback, asyncState);
        }
        
        private object[] OnEndrefreshDamageAreaAndcode(System.IAsyncResult result)
        {
            m.transport.Svc.ArrayOfXElement retVal = ((m.transport.Svc.ITransportService)(this)).EndrefreshDamageAreaAndcode(result);
            return new object[] {
                    retVal};
        }
        
        private void OnrefreshDamageAreaAndcodeCompleted(object state)
        {
            if ((this.refreshDamageAreaAndcodeCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.refreshDamageAreaAndcodeCompleted(this, new refreshDamageAreaAndcodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void refreshDamageAreaAndcodeAsync(string pDriver, string pPassword, string pTruck, System.DateTime pDamageTypeAndLocationSyncDate)
        {
            this.refreshDamageAreaAndcodeAsync(pDriver, pPassword, pTruck, pDamageTypeAndLocationSyncDate, null);
        }
        
        public void refreshDamageAreaAndcodeAsync(string pDriver, string pPassword, string pTruck, System.DateTime pDamageTypeAndLocationSyncDate, object userState)
        {
            if ((this.onBeginrefreshDamageAreaAndcodeDelegate == null))
            {
                this.onBeginrefreshDamageAreaAndcodeDelegate = new BeginOperationDelegate(this.OnBeginrefreshDamageAreaAndcode);
            }
            if ((this.onEndrefreshDamageAreaAndcodeDelegate == null))
            {
                this.onEndrefreshDamageAreaAndcodeDelegate = new EndOperationDelegate(this.OnEndrefreshDamageAreaAndcode);
            }
            if ((this.onrefreshDamageAreaAndcodeCompletedDelegate == null))
            {
                this.onrefreshDamageAreaAndcodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnrefreshDamageAreaAndcodeCompleted);
            }
            base.InvokeAsync(this.onBeginrefreshDamageAreaAndcodeDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck,
                        pDamageTypeAndLocationSyncDate}, this.onEndrefreshDamageAreaAndcodeDelegate, this.onrefreshDamageAreaAndcodeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Svc.ITransportService.BeginGetExpenseTypeList(string pDriver, string pPassword, string pTruck, string pHandheldID, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetExpenseTypeList(pDriver, pPassword, pTruck, pHandheldID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        m.transport.Svc.ArrayOfXElement m.transport.Svc.ITransportService.EndGetExpenseTypeList(System.IAsyncResult result)
        {
            return base.Channel.EndGetExpenseTypeList(result);
        }
        
        private System.IAsyncResult OnBeginGetExpenseTypeList(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            string pHandheldID = ((string)(inValues[3]));
            return ((m.transport.Svc.ITransportService)(this)).BeginGetExpenseTypeList(pDriver, pPassword, pTruck, pHandheldID, callback, asyncState);
        }
        
        private object[] OnEndGetExpenseTypeList(System.IAsyncResult result)
        {
            m.transport.Svc.ArrayOfXElement retVal = ((m.transport.Svc.ITransportService)(this)).EndGetExpenseTypeList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetExpenseTypeListCompleted(object state)
        {
            if ((this.GetExpenseTypeListCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetExpenseTypeListCompleted(this, new GetExpenseTypeListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetExpenseTypeListAsync(string pDriver, string pPassword, string pTruck, string pHandheldID)
        {
            this.GetExpenseTypeListAsync(pDriver, pPassword, pTruck, pHandheldID, null);
        }
        
        public void GetExpenseTypeListAsync(string pDriver, string pPassword, string pTruck, string pHandheldID, object userState)
        {
            if ((this.onBeginGetExpenseTypeListDelegate == null))
            {
                this.onBeginGetExpenseTypeListDelegate = new BeginOperationDelegate(this.OnBeginGetExpenseTypeList);
            }
            if ((this.onEndGetExpenseTypeListDelegate == null))
            {
                this.onEndGetExpenseTypeListDelegate = new EndOperationDelegate(this.OnEndGetExpenseTypeList);
            }
            if ((this.onGetExpenseTypeListCompletedDelegate == null))
            {
                this.onGetExpenseTypeListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetExpenseTypeListCompleted);
            }
            base.InvokeAsync(this.onBeginGetExpenseTypeListDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck,
                        pHandheldID}, this.onEndGetExpenseTypeListDelegate, this.onGetExpenseTypeListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Svc.ITransportService.BeginGetReasonList(string pDriver, string pPassword, string pTruck, string pHandheldID, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetReasonList(pDriver, pPassword, pTruck, pHandheldID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        m.transport.Svc.ArrayOfXElement m.transport.Svc.ITransportService.EndGetReasonList(System.IAsyncResult result)
        {
            return base.Channel.EndGetReasonList(result);
        }
        
        private System.IAsyncResult OnBeginGetReasonList(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            string pHandheldID = ((string)(inValues[3]));
            return ((m.transport.Svc.ITransportService)(this)).BeginGetReasonList(pDriver, pPassword, pTruck, pHandheldID, callback, asyncState);
        }
        
        private object[] OnEndGetReasonList(System.IAsyncResult result)
        {
            m.transport.Svc.ArrayOfXElement retVal = ((m.transport.Svc.ITransportService)(this)).EndGetReasonList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetReasonListCompleted(object state)
        {
            if ((this.GetReasonListCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetReasonListCompleted(this, new GetReasonListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetReasonListAsync(string pDriver, string pPassword, string pTruck, string pHandheldID)
        {
            this.GetReasonListAsync(pDriver, pPassword, pTruck, pHandheldID, null);
        }
        
        public void GetReasonListAsync(string pDriver, string pPassword, string pTruck, string pHandheldID, object userState)
        {
            if ((this.onBeginGetReasonListDelegate == null))
            {
                this.onBeginGetReasonListDelegate = new BeginOperationDelegate(this.OnBeginGetReasonList);
            }
            if ((this.onEndGetReasonListDelegate == null))
            {
                this.onEndGetReasonListDelegate = new EndOperationDelegate(this.OnEndGetReasonList);
            }
            if ((this.onGetReasonListCompletedDelegate == null))
            {
                this.onGetReasonListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetReasonListCompleted);
            }
            base.InvokeAsync(this.onBeginGetReasonListDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck,
                        pHandheldID}, this.onEndGetReasonListDelegate, this.onGetReasonListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Svc.ITransportService.BeginGetUnpaidExpenseList(string pDriver, string pPassword, string pTruck, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetUnpaidExpenseList(pDriver, pPassword, pTruck, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        m.transport.Svc.ArrayOfXElement m.transport.Svc.ITransportService.EndGetUnpaidExpenseList(System.IAsyncResult result)
        {
            return base.Channel.EndGetUnpaidExpenseList(result);
        }
        
        private System.IAsyncResult OnBeginGetUnpaidExpenseList(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            return ((m.transport.Svc.ITransportService)(this)).BeginGetUnpaidExpenseList(pDriver, pPassword, pTruck, callback, asyncState);
        }
        
        private object[] OnEndGetUnpaidExpenseList(System.IAsyncResult result)
        {
            m.transport.Svc.ArrayOfXElement retVal = ((m.transport.Svc.ITransportService)(this)).EndGetUnpaidExpenseList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUnpaidExpenseListCompleted(object state)
        {
            if ((this.GetUnpaidExpenseListCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUnpaidExpenseListCompleted(this, new GetUnpaidExpenseListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUnpaidExpenseListAsync(string pDriver, string pPassword, string pTruck)
        {
            this.GetUnpaidExpenseListAsync(pDriver, pPassword, pTruck, null);
        }
        
        public void GetUnpaidExpenseListAsync(string pDriver, string pPassword, string pTruck, object userState)
        {
            if ((this.onBeginGetUnpaidExpenseListDelegate == null))
            {
                this.onBeginGetUnpaidExpenseListDelegate = new BeginOperationDelegate(this.OnBeginGetUnpaidExpenseList);
            }
            if ((this.onEndGetUnpaidExpenseListDelegate == null))
            {
                this.onEndGetUnpaidExpenseListDelegate = new EndOperationDelegate(this.OnEndGetUnpaidExpenseList);
            }
            if ((this.onGetUnpaidExpenseListCompletedDelegate == null))
            {
                this.onGetUnpaidExpenseListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUnpaidExpenseListCompleted);
            }
            base.InvokeAsync(this.onBeginGetUnpaidExpenseListDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck}, this.onEndGetUnpaidExpenseListDelegate, this.onGetUnpaidExpenseListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Svc.ITransportService.BeginSendExpense(string pDriver, string pPassword, string pTruck, m.transport.Domain.Expense expense, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginSendExpense(pDriver, pPassword, pTruck, expense, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        m.transport.Svc.ArrayOfXElement m.transport.Svc.ITransportService.EndSendExpense(System.IAsyncResult result)
        {
            return base.Channel.EndSendExpense(result);
        }
        
        private System.IAsyncResult OnBeginSendExpense(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            m.transport.Domain.Expense expense = ((m.transport.Domain.Expense)(inValues[3]));
            return ((m.transport.Svc.ITransportService)(this)).BeginSendExpense(pDriver, pPassword, pTruck, expense, callback, asyncState);
        }
        
        private object[] OnEndSendExpense(System.IAsyncResult result)
        {
            m.transport.Svc.ArrayOfXElement retVal = ((m.transport.Svc.ITransportService)(this)).EndSendExpense(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendExpenseCompleted(object state)
        {
            if ((this.SendExpenseCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendExpenseCompleted(this, new SendExpenseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendExpenseAsync(string pDriver, string pPassword, string pTruck, m.transport.Domain.Expense expense)
        {
            this.SendExpenseAsync(pDriver, pPassword, pTruck, expense, null);
        }
        
        public void SendExpenseAsync(string pDriver, string pPassword, string pTruck, m.transport.Domain.Expense expense, object userState)
        {
            if ((this.onBeginSendExpenseDelegate == null))
            {
                this.onBeginSendExpenseDelegate = new BeginOperationDelegate(this.OnBeginSendExpense);
            }
            if ((this.onEndSendExpenseDelegate == null))
            {
                this.onEndSendExpenseDelegate = new EndOperationDelegate(this.OnEndSendExpense);
            }
            if ((this.onSendExpenseCompletedDelegate == null))
            {
                this.onSendExpenseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendExpenseCompleted);
            }
            base.InvokeAsync(this.onBeginSendExpenseDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck,
                        expense}, this.onEndSendExpenseDelegate, this.onSendExpenseCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Svc.ITransportService.BeginSendExceptionResponse(string pDriver, string pPassword, string pTruck, m.transport.Svc.ArrayOfXElement pExceptionResponse, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginSendExceptionResponse(pDriver, pPassword, pTruck, pExceptionResponse, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        m.transport.Svc.ArrayOfXElement m.transport.Svc.ITransportService.EndSendExceptionResponse(System.IAsyncResult result)
        {
            return base.Channel.EndSendExceptionResponse(result);
        }
        
        private System.IAsyncResult OnBeginSendExceptionResponse(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            m.transport.Svc.ArrayOfXElement pExceptionResponse = ((m.transport.Svc.ArrayOfXElement)(inValues[3]));
            return ((m.transport.Svc.ITransportService)(this)).BeginSendExceptionResponse(pDriver, pPassword, pTruck, pExceptionResponse, callback, asyncState);
        }
        
        private object[] OnEndSendExceptionResponse(System.IAsyncResult result)
        {
            m.transport.Svc.ArrayOfXElement retVal = ((m.transport.Svc.ITransportService)(this)).EndSendExceptionResponse(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendExceptionResponseCompleted(object state)
        {
            if ((this.SendExceptionResponseCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendExceptionResponseCompleted(this, new SendExceptionResponseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendExceptionResponseAsync(string pDriver, string pPassword, string pTruck, m.transport.Svc.ArrayOfXElement pExceptionResponse)
        {
            this.SendExceptionResponseAsync(pDriver, pPassword, pTruck, pExceptionResponse, null);
        }
        
        public void SendExceptionResponseAsync(string pDriver, string pPassword, string pTruck, m.transport.Svc.ArrayOfXElement pExceptionResponse, object userState)
        {
            if ((this.onBeginSendExceptionResponseDelegate == null))
            {
                this.onBeginSendExceptionResponseDelegate = new BeginOperationDelegate(this.OnBeginSendExceptionResponse);
            }
            if ((this.onEndSendExceptionResponseDelegate == null))
            {
                this.onEndSendExceptionResponseDelegate = new EndOperationDelegate(this.OnEndSendExceptionResponse);
            }
            if ((this.onSendExceptionResponseCompletedDelegate == null))
            {
                this.onSendExceptionResponseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendExceptionResponseCompleted);
            }
            base.InvokeAsync(this.onBeginSendExceptionResponseDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck,
                        pExceptionResponse}, this.onEndSendExceptionResponseDelegate, this.onSendExceptionResponseCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Svc.ITransportService.BeginVerifyVIN(string pDriver, string pPassword, string pTruck, string pVIN, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginVerifyVIN(pDriver, pPassword, pTruck, pVIN, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        m.transport.Svc.ArrayOfXElement m.transport.Svc.ITransportService.EndVerifyVIN(System.IAsyncResult result)
        {
            return base.Channel.EndVerifyVIN(result);
        }
        
        private System.IAsyncResult OnBeginVerifyVIN(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            string pVIN = ((string)(inValues[3]));
            return ((m.transport.Svc.ITransportService)(this)).BeginVerifyVIN(pDriver, pPassword, pTruck, pVIN, callback, asyncState);
        }
        
        private object[] OnEndVerifyVIN(System.IAsyncResult result)
        {
            m.transport.Svc.ArrayOfXElement retVal = ((m.transport.Svc.ITransportService)(this)).EndVerifyVIN(result);
            return new object[] {
                    retVal};
        }
        
        private void OnVerifyVINCompleted(object state)
        {
            if ((this.VerifyVINCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.VerifyVINCompleted(this, new VerifyVINCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void VerifyVINAsync(string pDriver, string pPassword, string pTruck, string pVIN)
        {
            this.VerifyVINAsync(pDriver, pPassword, pTruck, pVIN, null);
        }
        
        public void VerifyVINAsync(string pDriver, string pPassword, string pTruck, string pVIN, object userState)
        {
            if ((this.onBeginVerifyVINDelegate == null))
            {
                this.onBeginVerifyVINDelegate = new BeginOperationDelegate(this.OnBeginVerifyVIN);
            }
            if ((this.onEndVerifyVINDelegate == null))
            {
                this.onEndVerifyVINDelegate = new EndOperationDelegate(this.OnEndVerifyVIN);
            }
            if ((this.onVerifyVINCompletedDelegate == null))
            {
                this.onVerifyVINCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnVerifyVINCompleted);
            }
            base.InvokeAsync(this.onBeginVerifyVINDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck,
                        pVIN}, this.onEndVerifyVINDelegate, this.onVerifyVINCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Svc.ITransportService.BeginSendDriverSignature(string pDriver, string pPassword, string pTruck, DeliverySignature signature, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginSendDriverSignature(pDriver, pPassword, pTruck, signature, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void m.transport.Svc.ITransportService.EndSendDriverSignature(System.IAsyncResult result)
        {
            base.Channel.EndSendDriverSignature(result);
        }
        
        private System.IAsyncResult OnBeginSendDriverSignature(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            DeliverySignature signature = ((DeliverySignature)(inValues[3]));
            return ((m.transport.Svc.ITransportService)(this)).BeginSendDriverSignature(pDriver, pPassword, pTruck, signature, callback, asyncState);
        }
        
        private object[] OnEndSendDriverSignature(System.IAsyncResult result)
        {
            ((m.transport.Svc.ITransportService)(this)).EndSendDriverSignature(result);
            return null;
        }
        
        private void OnSendDriverSignatureCompleted(object state)
        {
            if ((this.SendDriverSignatureCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendDriverSignatureCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendDriverSignatureAsync(string pDriver, string pPassword, string pTruck, DeliverySignature signature)
        {
            this.SendDriverSignatureAsync(pDriver, pPassword, pTruck, signature, null);
        }
        
        public void SendDriverSignatureAsync(string pDriver, string pPassword, string pTruck, DeliverySignature signature, object userState)
        {
            if ((this.onBeginSendDriverSignatureDelegate == null))
            {
                this.onBeginSendDriverSignatureDelegate = new BeginOperationDelegate(this.OnBeginSendDriverSignature);
            }
            if ((this.onEndSendDriverSignatureDelegate == null))
            {
                this.onEndSendDriverSignatureDelegate = new EndOperationDelegate(this.OnEndSendDriverSignature);
            }
            if ((this.onSendDriverSignatureCompletedDelegate == null))
            {
                this.onSendDriverSignatureCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendDriverSignatureCompleted);
            }
            base.InvokeAsync(this.onBeginSendDriverSignatureDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck,
                        signature}, this.onEndSendDriverSignatureDelegate, this.onSendDriverSignatureCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Svc.ITransportService.BeginSendDamagePhotos(string pDriver, string pPassword, string pTruck, DamagePhoto[] photos, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginSendDamagePhotos(pDriver, pPassword, pTruck, photos, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void m.transport.Svc.ITransportService.EndSendDamagePhotos(System.IAsyncResult result)
        {
            base.Channel.EndSendDamagePhotos(result);
        }
        
        private System.IAsyncResult OnBeginSendDamagePhotos(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            DamagePhoto[] photos = ((DamagePhoto[])(inValues[3]));
            return ((m.transport.Svc.ITransportService)(this)).BeginSendDamagePhotos(pDriver, pPassword, pTruck, photos, callback, asyncState);
        }
        
        private object[] OnEndSendDamagePhotos(System.IAsyncResult result)
        {
            ((m.transport.Svc.ITransportService)(this)).EndSendDamagePhotos(result);
            return null;
        }
        
        private void OnSendDamagePhotosCompleted(object state)
        {
            if ((this.SendDamagePhotosCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendDamagePhotosCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendDamagePhotosAsync(string pDriver, string pPassword, string pTruck,DamagePhoto[] photos)
        {
            this.SendDamagePhotosAsync(pDriver, pPassword, pTruck, photos, null);
        }
        
        public void SendDamagePhotosAsync(string pDriver, string pPassword, string pTruck, DamagePhoto[] photos, object userState)
        {
            if ((this.onBeginSendDamagePhotosDelegate == null))
            {
                this.onBeginSendDamagePhotosDelegate = new BeginOperationDelegate(this.OnBeginSendDamagePhotos);
            }
            if ((this.onEndSendDamagePhotosDelegate == null))
            {
                this.onEndSendDamagePhotosDelegate = new EndOperationDelegate(this.OnEndSendDamagePhotos);
            }
            if ((this.onSendDamagePhotosCompletedDelegate == null))
            {
                this.onSendDamagePhotosCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendDamagePhotosCompleted);
            }
            base.InvokeAsync(this.onBeginSendDamagePhotosDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck,
                        photos}, this.onEndSendDamagePhotosDelegate, this.onSendDamagePhotosCompletedDelegate, userState);
        }

		//
		[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
		System.IAsyncResult m.transport.Svc.ITransportService.BeginLogMobileDevice(MobileDevice device, System.AsyncCallback callback, object asyncState)
		{
			return base.Channel.BeginLogMobileDevice(device, callback, asyncState);
		}

		[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
		void m.transport.Svc.ITransportService.EndLogMobileDevice(System.IAsyncResult result)
		{
			base.Channel.EndLogMobileDevice(result);
		}

		private System.IAsyncResult OnBeginLogMobileDevice(object[] inValues, System.AsyncCallback callback, object asyncState)
		{
			MobileDevice device = ((MobileDevice)(inValues[0]));
			return ((m.transport.Svc.ITransportService)(this)).BeginLogMobileDevice(device, callback, asyncState);
		}

		private object[] OnEndLogMobileDevice(System.IAsyncResult result)
		{
			((m.transport.Svc.ITransportService)(this)).EndLogMobileDevice(result);
			return null;
		}

		private void OnLogMobileDeviceCompleted(object state)
		{
			if ((this.LogMobileDeviceCompleted != null))
			{
				InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
				this.LogMobileDeviceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
			}
		}

		public void LogMobileDeviceAsync(MobileDevice device)
		{
			this.LogMobileDeviceAsync(device, null);
		}

		public void LogMobileDeviceAsync(MobileDevice device, object userState)
		{
			if ((this.onBeginLogMobileDeviceDelegate == null))
			{
				this.onBeginLogMobileDeviceDelegate = new BeginOperationDelegate(this.OnBeginLogMobileDevice);
			}
			if ((this.onEndLogMobileDeviceDelegate == null))
			{
				this.onEndLogMobileDeviceDelegate = new EndOperationDelegate(this.OnEndLogMobileDevice);
			}
			if ((this.onLogMobileDeviceCompletedDelegate == null))
			{
				this.onLogMobileDeviceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogMobileDeviceCompleted);
			}
			base.InvokeAsync(this.onBeginLogMobileDeviceDelegate, new object[] {
				device}, this.onEndLogMobileDeviceDelegate, this.onLogMobileDeviceCompletedDelegate, userState);
		}
		//

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Svc.ITransportService.BeginGetDriverSignature(m.transport.Svc.GetDriverSignatureRequest request, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetDriverSignature(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetDriverSignature(string pDriver, string pPassword, string pTruck, System.AsyncCallback callback, object asyncState)
        {
            m.transport.Svc.GetDriverSignatureRequest inValue = new m.transport.Svc.GetDriverSignatureRequest();
            inValue.pDriver = pDriver;
            inValue.pPassword = pPassword;
            inValue.pTruck = pTruck;
            return ((m.transport.Svc.ITransportService)(this)).BeginGetDriverSignature(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        m.transport.Svc.GetDriverSignatureResponse m.transport.Svc.ITransportService.EndGetDriverSignature(System.IAsyncResult result)
        {
            return base.Channel.EndGetDriverSignature(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private byte[] EndGetDriverSignature(System.IAsyncResult result)
        {
            m.transport.Svc.GetDriverSignatureResponse retVal = ((m.transport.Svc.ITransportService)(this)).EndGetDriverSignature(result);
            return retVal.GetDriverSignatureResult;
        }
        
        private System.IAsyncResult OnBeginGetDriverSignature(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            return this.BeginGetDriverSignature(pDriver, pPassword, pTruck, callback, asyncState);
        }
        
        private object[] OnEndGetDriverSignature(System.IAsyncResult result)
        {
            byte[] retVal = this.EndGetDriverSignature(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDriverSignatureCompleted(object state)
        {
            if ((this.GetDriverSignatureCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDriverSignatureCompleted(this, new GetDriverSignatureCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDriverSignatureAsync(string pDriver, string pPassword, string pTruck)
        {
            this.GetDriverSignatureAsync(pDriver, pPassword, pTruck, null);
        }
        
        public void GetDriverSignatureAsync(string pDriver, string pPassword, string pTruck, object userState)
        {
            if ((this.onBeginGetDriverSignatureDelegate == null))
            {
                this.onBeginGetDriverSignatureDelegate = new BeginOperationDelegate(this.OnBeginGetDriverSignature);
            }
            if ((this.onEndGetDriverSignatureDelegate == null))
            {
                this.onEndGetDriverSignatureDelegate = new EndOperationDelegate(this.OnEndGetDriverSignature);
            }
            if ((this.onGetDriverSignatureCompletedDelegate == null))
            {
                this.onGetDriverSignatureCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDriverSignatureCompleted);
            }
            base.InvokeAsync(this.onBeginGetDriverSignatureDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck}, this.onEndGetDriverSignatureDelegate, this.onGetDriverSignatureCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Svc.ITransportService.BeginGetLatestReleaseVersion(string appVersion, string inspectorCode, string inspectorName, string handHeldID, string localTime, string localTimeZone, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetLatestReleaseVersion(appVersion, inspectorCode, inspectorName, handHeldID, localTime, localTimeZone, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string m.transport.Svc.ITransportService.EndGetLatestReleaseVersion(System.IAsyncResult result)
        {
            return base.Channel.EndGetLatestReleaseVersion(result);
        }
        
        private System.IAsyncResult OnBeginGetLatestReleaseVersion(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string appVersion = ((string)(inValues[0]));
            string inspectorCode = ((string)(inValues[1]));
            string inspectorName = ((string)(inValues[2]));
            string handHeldID = ((string)(inValues[3]));
            string localTime = ((string)(inValues[4]));
            string localTimeZone = ((string)(inValues[5]));
            return ((m.transport.Svc.ITransportService)(this)).BeginGetLatestReleaseVersion(appVersion, inspectorCode, inspectorName, handHeldID, localTime, localTimeZone, callback, asyncState);
        }
        
        private object[] OnEndGetLatestReleaseVersion(System.IAsyncResult result)
        {
            string retVal = ((m.transport.Svc.ITransportService)(this)).EndGetLatestReleaseVersion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLatestReleaseVersionCompleted(object state)
        {
            if ((this.GetLatestReleaseVersionCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLatestReleaseVersionCompleted(this, new GetLatestReleaseVersionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLatestReleaseVersionAsync(string appVersion, string inspectorCode, string inspectorName, string handHeldID, string localTime, string localTimeZone)
        {
            this.GetLatestReleaseVersionAsync(appVersion, inspectorCode, inspectorName, handHeldID, localTime, localTimeZone, null);
        }
        
        public void GetLatestReleaseVersionAsync(string appVersion, string inspectorCode, string inspectorName, string handHeldID, string localTime, string localTimeZone, object userState)
        {
            if ((this.onBeginGetLatestReleaseVersionDelegate == null))
            {
                this.onBeginGetLatestReleaseVersionDelegate = new BeginOperationDelegate(this.OnBeginGetLatestReleaseVersion);
            }
            if ((this.onEndGetLatestReleaseVersionDelegate == null))
            {
                this.onEndGetLatestReleaseVersionDelegate = new EndOperationDelegate(this.OnEndGetLatestReleaseVersion);
            }
            if ((this.onGetLatestReleaseVersionCompletedDelegate == null))
            {
                this.onGetLatestReleaseVersionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLatestReleaseVersionCompleted);
            }
            base.InvokeAsync(this.onBeginGetLatestReleaseVersionDelegate, new object[] {
                        appVersion,
                        inspectorCode,
                        inspectorName,
                        handHeldID,
                        localTime,
                        localTimeZone}, this.onEndGetLatestReleaseVersionDelegate, this.onGetLatestReleaseVersionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Svc.ITransportService.BeginDownloadRelease(string appVersion, string inspectorCode, string inspectorName, string handHeldID, string localTime, string localTimeZone, string version, int currentPosition, int chunckSize, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginDownloadRelease(appVersion, inspectorCode, inspectorName, handHeldID, localTime, localTimeZone, version, currentPosition, chunckSize, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        DAIFileDetails m.transport.Svc.ITransportService.EndDownloadRelease(System.IAsyncResult result)
        {
            return base.Channel.EndDownloadRelease(result);
        }
        
        private System.IAsyncResult OnBeginDownloadRelease(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string appVersion = ((string)(inValues[0]));
            string inspectorCode = ((string)(inValues[1]));
            string inspectorName = ((string)(inValues[2]));
            string handHeldID = ((string)(inValues[3]));
            string localTime = ((string)(inValues[4]));
            string localTimeZone = ((string)(inValues[5]));
            string version = ((string)(inValues[6]));
            int currentPosition = ((int)(inValues[7]));
            int chunckSize = ((int)(inValues[8]));
            return ((m.transport.Svc.ITransportService)(this)).BeginDownloadRelease(appVersion, inspectorCode, inspectorName, handHeldID, localTime, localTimeZone, version, currentPosition, chunckSize, callback, asyncState);
        }
        
        private object[] OnEndDownloadRelease(System.IAsyncResult result)
        {
            DAIFileDetails retVal = ((m.transport.Svc.ITransportService)(this)).EndDownloadRelease(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDownloadReleaseCompleted(object state)
        {
            if ((this.DownloadReleaseCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DownloadReleaseCompleted(this, new DownloadReleaseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DownloadReleaseAsync(string appVersion, string inspectorCode, string inspectorName, string handHeldID, string localTime, string localTimeZone, string version, int currentPosition, int chunckSize)
        {
            this.DownloadReleaseAsync(appVersion, inspectorCode, inspectorName, handHeldID, localTime, localTimeZone, version, currentPosition, chunckSize, null);
        }
        
        public void DownloadReleaseAsync(string appVersion, string inspectorCode, string inspectorName, string handHeldID, string localTime, string localTimeZone, string version, int currentPosition, int chunckSize, object userState)
        {
            if ((this.onBeginDownloadReleaseDelegate == null))
            {
                this.onBeginDownloadReleaseDelegate = new BeginOperationDelegate(this.OnBeginDownloadRelease);
            }
            if ((this.onEndDownloadReleaseDelegate == null))
            {
                this.onEndDownloadReleaseDelegate = new EndOperationDelegate(this.OnEndDownloadRelease);
            }
            if ((this.onDownloadReleaseCompletedDelegate == null))
            {
                this.onDownloadReleaseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDownloadReleaseCompleted);
            }
            base.InvokeAsync(this.onBeginDownloadReleaseDelegate, new object[] {
                        appVersion,
                        inspectorCode,
                        inspectorName,
                        handHeldID,
                        localTime,
                        localTimeZone,
                        version,
                        currentPosition,
                        chunckSize}, this.onEndDownloadReleaseDelegate, this.onDownloadReleaseCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
		System.IAsyncResult m.transport.Svc.ITransportService.BeginGetCurrentLoad(string pDriver, string pPassword, string pTruck, bool clearExceptions, string returnLoad, System.AsyncCallback callback, object asyncState)
        {
			return base.Channel.BeginGetCurrentLoad(pDriver, pPassword, pTruck, clearExceptions, returnLoad, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CurrentLoadResult m.transport.Svc.ITransportService.EndGetCurrentLoad(System.IAsyncResult result)
        {
            return base.Channel.EndGetCurrentLoad(result);
        }
        
        private System.IAsyncResult OnBeginGetCurrentLoad(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            bool clearExceptions = ((bool)(inValues[3]));
			string returnLoad = ((string)(inValues[4]));
			return ((m.transport.Svc.ITransportService)(this)).BeginGetCurrentLoad(pDriver, pPassword, pTruck, clearExceptions, returnLoad, callback, asyncState);
        }
        
        private object[] OnEndGetCurrentLoad(System.IAsyncResult result)
        {
            CurrentLoadResult retVal = ((m.transport.Svc.ITransportService)(this)).EndGetCurrentLoad(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCurrentLoadCompleted(object state)
        {
            if ((this.GetCurrentLoadCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCurrentLoadCompleted(this, new GetCurrentLoadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
		public void GetCurrentLoadAsync(string pDriver, string pPassword, string pTruck, bool clearExceptions, string returnLoad)
        {
			this.GetCurrentLoadAsync(pDriver, pPassword, pTruck, clearExceptions, returnLoad, null);
        }
        
        public void GetCurrentLoadAsync(string pDriver, string pPassword, string pTruck, bool clearExceptions, string returnLoad, object userState)
        {
            if ((this.onBeginGetCurrentLoadDelegate == null))
            {
                this.onBeginGetCurrentLoadDelegate = new BeginOperationDelegate(this.OnBeginGetCurrentLoad);
            }
            if ((this.onEndGetCurrentLoadDelegate == null))
            {
                this.onEndGetCurrentLoadDelegate = new EndOperationDelegate(this.OnEndGetCurrentLoad);
            }
            if ((this.onGetCurrentLoadCompletedDelegate == null))
            {
                this.onGetCurrentLoadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCurrentLoadCompleted);
            }
            base.InvokeAsync(this.onBeginGetCurrentLoadDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck,
                        clearExceptions,
						returnLoad}, this.onEndGetCurrentLoadDelegate, this.onGetCurrentLoadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Svc.ITransportService.BeginUploadCurrentLoad(string pDriver, string pPassword, string pTruck, CurrentLoadUpdate pCurrentLoad, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginUploadCurrentLoad(pDriver, pPassword, pTruck, pCurrentLoad, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void m.transport.Svc.ITransportService.EndUploadCurrentLoad(System.IAsyncResult result)
        {
            base.Channel.EndUploadCurrentLoad(result);
        }
        
        private System.IAsyncResult OnBeginUploadCurrentLoad(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            string pTruck = ((string)(inValues[2]));
            CurrentLoadUpdate pCurrentLoad = ((CurrentLoadUpdate)(inValues[3]));
            return ((m.transport.Svc.ITransportService)(this)).BeginUploadCurrentLoad(pDriver, pPassword, pTruck, pCurrentLoad, callback, asyncState);
        }
        
        private object[] OnEndUploadCurrentLoad(System.IAsyncResult result)
        {
            ((m.transport.Svc.ITransportService)(this)).EndUploadCurrentLoad(result);
            return null;
        }
        
        private void OnUploadCurrentLoadCompleted(object state)
        {
            if ((this.UploadCurrentLoadCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UploadCurrentLoadCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UploadCurrentLoadAsync(string pDriver, string pPassword, string pTruck, CurrentLoadUpdate pCurrentLoad)
        {
            this.UploadCurrentLoadAsync(pDriver, pPassword, pTruck, pCurrentLoad, null);
        }
        
        public void UploadCurrentLoadAsync(string pDriver, string pPassword, string pTruck, CurrentLoadUpdate pCurrentLoad, object userState)
        {
            if ((this.onBeginUploadCurrentLoadDelegate == null))
            {
                this.onBeginUploadCurrentLoadDelegate = new BeginOperationDelegate(this.OnBeginUploadCurrentLoad);
            }
            if ((this.onEndUploadCurrentLoadDelegate == null))
            {
                this.onEndUploadCurrentLoadDelegate = new EndOperationDelegate(this.OnEndUploadCurrentLoad);
            }
            if ((this.onUploadCurrentLoadCompletedDelegate == null))
            {
                this.onUploadCurrentLoadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadCurrentLoadCompleted);
            }
            base.InvokeAsync(this.onBeginUploadCurrentLoadDelegate, new object[] {
                        pDriver,
                        pPassword,
                        pTruck,
                        pCurrentLoad}, this.onEndUploadCurrentLoadDelegate, this.onUploadCurrentLoadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Svc.ITransportService.BeginResetUser(string pDriver, string pPassword, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginResetUser(pDriver, pPassword, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void m.transport.Svc.ITransportService.EndResetUser(System.IAsyncResult result)
        {
            base.Channel.EndResetUser(result);
        }
        
        private System.IAsyncResult OnBeginResetUser(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            string pDriver = ((string)(inValues[0]));
            string pPassword = ((string)(inValues[1]));
            return ((m.transport.Svc.ITransportService)(this)).BeginResetUser(pDriver, pPassword, callback, asyncState);
        }
        
        private object[] OnEndResetUser(System.IAsyncResult result)
        {
            ((m.transport.Svc.ITransportService)(this)).EndResetUser(result);
            return null;
        }
        
        private void OnResetUserCompleted(object state)
        {
            if ((this.ResetUserCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResetUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResetUserAsync(string pDriver, string pPassword)
        {
            this.ResetUserAsync(pDriver, pPassword, null);
        }
        
        public void ResetUserAsync(string pDriver, string pPassword, object userState)
        {
            if ((this.onBeginResetUserDelegate == null))
            {
                this.onBeginResetUserDelegate = new BeginOperationDelegate(this.OnBeginResetUser);
            }
            if ((this.onEndResetUserDelegate == null))
            {
                this.onEndResetUserDelegate = new EndOperationDelegate(this.OnEndResetUser);
            }
            if ((this.onResetUserCompletedDelegate == null))
            {
                this.onResetUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResetUserCompleted);
            }
            base.InvokeAsync(this.onBeginResetUserDelegate, new object[] {
                        pDriver,
                        pPassword}, this.onEndResetUserDelegate, this.onResetUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult m.transport.Svc.ITransportService.BeginGetMobileSettings(System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetMobileSettings(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MobileSettingsResult m.transport.Svc.ITransportService.EndGetMobileSettings(System.IAsyncResult result)
        {
            return base.Channel.EndGetMobileSettings(result);
        }
        
        private System.IAsyncResult OnBeginGetMobileSettings(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            return ((m.transport.Svc.ITransportService)(this)).BeginGetMobileSettings(callback, asyncState);
        }
        
        private object[] OnEndGetMobileSettings(System.IAsyncResult result)
        {
            MobileSettingsResult retVal = ((m.transport.Svc.ITransportService)(this)).EndGetMobileSettings(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMobileSettingsCompleted(object state)
        {
            if ((this.GetMobileSettingsCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMobileSettingsCompleted(this, new GetMobileSettingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMobileSettingsAsync()
        {
            this.GetMobileSettingsAsync(null);
        }
        
        public void GetMobileSettingsAsync(object userState)
        {
            if ((this.onBeginGetMobileSettingsDelegate == null))
            {
                this.onBeginGetMobileSettingsDelegate = new BeginOperationDelegate(this.OnBeginGetMobileSettings);
            }
            if ((this.onEndGetMobileSettingsDelegate == null))
            {
                this.onEndGetMobileSettingsDelegate = new EndOperationDelegate(this.OnEndGetMobileSettings);
            }
            if ((this.onGetMobileSettingsCompletedDelegate == null))
            {
                this.onGetMobileSettingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMobileSettingsCompleted);
            }
            base.InvokeAsync(this.onBeginGetMobileSettingsDelegate, null, this.onEndGetMobileSettingsDelegate, this.onGetMobileSettingsCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result)
        {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state)
        {
            if ((this.OpenCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync()
        {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState)
        {
            if ((this.onBeginOpenDelegate == null))
            {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null))
            {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null))
            {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result)
        {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state)
        {
            if ((this.CloseCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync()
        {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState)
        {
            if ((this.onBeginCloseDelegate == null))
            {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null))
            {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null))
            {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override m.transport.Svc.ITransportService CreateChannel()
        {
            return new TransportServiceClientChannel(this);
        }
        
        private class TransportServiceClientChannel : ChannelBase<m.transport.Svc.ITransportService>, m.transport.Svc.ITransportService
        {
            
            public TransportServiceClientChannel(System.ServiceModel.ClientBase<m.transport.Svc.ITransportService> client) : 
                    base(client)
            {
            }
            
            public System.IAsyncResult BeginVersion(System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("Version", _args, callback, asyncState);
                return _result;
            }
            
            public string EndVersion(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("Version", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginConnected(System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("Connected", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndConnected(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("Connected", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginServerTime(System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ServerTime", _args, callback, asyncState);
                return _result;
            }
            
            public string EndServerTime(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("ServerTime", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLogin(string pDriver, string pPassword, string pTruck, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[3];
                _args[0] = pDriver;
                _args[1] = pPassword;
                _args[2] = pTruck;
                System.IAsyncResult _result = base.BeginInvoke("Login", _args, callback, asyncState);
                return _result;
            }
            
            public LoginResult EndLogin(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                LoginResult _result = ((LoginResult)(base.EndInvoke("Login", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetMileageDetails(string pNewTruck, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[1];
                _args[0] = pNewTruck;
                System.IAsyncResult _result = base.BeginInvoke("GetMileageDetails", _args, callback, asyncState);
                return _result;
            }
            
            public MileageResult EndGetMileageDetails(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                MileageResult _result = ((MileageResult)(base.EndInvoke("GetMileageDetails", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateTruck(string pDriver, string pPassword, string pTruck, string pNewTruck, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[4];
                _args[0] = pDriver;
                _args[1] = pPassword;
                _args[2] = pTruck;
                _args[3] = pNewTruck;
                System.IAsyncResult _result = base.BeginInvoke("UpdateTruck", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateTruck(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                base.EndInvoke("UpdateTruck", _args, result);
            }
            
            public System.IAsyncResult BeginUpdateOdometer(string pDriver, string pPassword, string pTruck, string pOdometer, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[4];
                _args[0] = pDriver;
                _args[1] = pPassword;
                _args[2] = pTruck;
                _args[3] = pOdometer;
                System.IAsyncResult _result = base.BeginInvoke("UpdateOdometer", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateOdometer(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                base.EndInvoke("UpdateOdometer", _args, result);
            }
            
            public System.IAsyncResult BeginGetDriverID(string pDriver, string pPassword, string pTruck, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[3];
                _args[0] = pDriver;
                _args[1] = pPassword;
                _args[2] = pTruck;
                System.IAsyncResult _result = base.BeginInvoke("GetDriverID", _args, callback, asyncState);
                return _result;
            }
            
            public m.transport.Svc.ArrayOfXElement EndGetDriverID(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                m.transport.Svc.ArrayOfXElement _result = ((m.transport.Svc.ArrayOfXElement)(base.EndInvoke("GetDriverID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetRunList(string pDriver, string pPassword, string pTruck, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[3];
                _args[0] = pDriver;
                _args[1] = pPassword;
                _args[2] = pTruck;
                System.IAsyncResult _result = base.BeginInvoke("GetRunList", _args, callback, asyncState);
                return _result;
            }
            
            public GetRunListResult EndGetRunList(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                GetRunListResult _result = ((GetRunListResult)(base.EndInvoke("GetRunList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetRunDetail(string pDriver, string pPassword, string pTruck, string pRunID, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[4];
                _args[0] = pDriver;
                _args[1] = pPassword;
                _args[2] = pTruck;
                _args[3] = pRunID;
                System.IAsyncResult _result = base.BeginInvoke("GetRunDetail", _args, callback, asyncState);
                return _result;
            }
            
            public GetRunDetailResult EndGetRunDetail(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                GetRunDetailResult _result = ((GetRunDetailResult)(base.EndInvoke("GetRunDetail", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDamageCodeList(string pDriver, string pPassword, string pTruck, string pHandheldID, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[4];
                _args[0] = pDriver;
                _args[1] = pPassword;
                _args[2] = pTruck;
                _args[3] = pHandheldID;
                System.IAsyncResult _result = base.BeginInvoke("GetDamageCodeList", _args, callback, asyncState);
                return _result;
            }
            
            public DamageCodes EndGetDamageCodeList(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                DamageCodes _result = ((DamageCodes)(base.EndInvoke("GetDamageCodeList", _args, result)));
                return _result;
            }

			public System.IAsyncResult BeginGetCodes(string pDriver, string pPassword, string pTruck, string codeTypes, System.AsyncCallback callback, object asyncState)
			{
				object[] _args = new object[4];
				_args[0] = pDriver;
				_args[1] = pPassword;
				_args[2] = pTruck;
				_args[3] = codeTypes;
				System.IAsyncResult _result = base.BeginInvoke("GetCodes", _args, callback, asyncState);
				return _result;
			}

			public Code[] EndGetCodes(System.IAsyncResult result)
			{
				object[] _args = new object[0];
				Code[] _result = ((Code[])(base.EndInvoke("GetCodes", _args, result)));
				return _result;
			}

            public System.IAsyncResult BeginrefreshDamageAreaAndcode(string pDriver, string pPassword, string pTruck, System.DateTime pDamageTypeAndLocationSyncDate, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[4];
                _args[0] = pDriver;
                _args[1] = pPassword;
                _args[2] = pTruck;
                _args[3] = pDamageTypeAndLocationSyncDate;
                System.IAsyncResult _result = base.BeginInvoke("refreshDamageAreaAndcode", _args, callback, asyncState);
                return _result;
            }
            
            public m.transport.Svc.ArrayOfXElement EndrefreshDamageAreaAndcode(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                m.transport.Svc.ArrayOfXElement _result = ((m.transport.Svc.ArrayOfXElement)(base.EndInvoke("refreshDamageAreaAndcode", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetExpenseTypeList(string pDriver, string pPassword, string pTruck, string pHandheldID, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[4];
                _args[0] = pDriver;
                _args[1] = pPassword;
                _args[2] = pTruck;
                _args[3] = pHandheldID;
                System.IAsyncResult _result = base.BeginInvoke("GetExpenseTypeList", _args, callback, asyncState);
                return _result;
            }
            
            public m.transport.Svc.ArrayOfXElement EndGetExpenseTypeList(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                m.transport.Svc.ArrayOfXElement _result = ((m.transport.Svc.ArrayOfXElement)(base.EndInvoke("GetExpenseTypeList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetReasonList(string pDriver, string pPassword, string pTruck, string pHandheldID, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[4];
                _args[0] = pDriver;
                _args[1] = pPassword;
                _args[2] = pTruck;
                _args[3] = pHandheldID;
                System.IAsyncResult _result = base.BeginInvoke("GetReasonList", _args, callback, asyncState);
                return _result;
            }
            
            public m.transport.Svc.ArrayOfXElement EndGetReasonList(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                m.transport.Svc.ArrayOfXElement _result = ((m.transport.Svc.ArrayOfXElement)(base.EndInvoke("GetReasonList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUnpaidExpenseList(string pDriver, string pPassword, string pTruck, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[3];
                _args[0] = pDriver;
                _args[1] = pPassword;
                _args[2] = pTruck;
                System.IAsyncResult _result = base.BeginInvoke("GetUnpaidExpenseList", _args, callback, asyncState);
                return _result;
            }
            
            public m.transport.Svc.ArrayOfXElement EndGetUnpaidExpenseList(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                m.transport.Svc.ArrayOfXElement _result = ((m.transport.Svc.ArrayOfXElement)(base.EndInvoke("GetUnpaidExpenseList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSendExpense(string pDriver, string pPassword, string pTruck, m.transport.Domain.Expense expense, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[4];
                _args[0] = pDriver;
                _args[1] = pPassword;
                _args[2] = pTruck;
                _args[3] = expense;
                System.IAsyncResult _result = base.BeginInvoke("SendExpense", _args, callback, asyncState);
                return _result;
            }
            
            public m.transport.Svc.ArrayOfXElement EndSendExpense(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                m.transport.Svc.ArrayOfXElement _result = ((m.transport.Svc.ArrayOfXElement)(base.EndInvoke("SendExpense", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSendExceptionResponse(string pDriver, string pPassword, string pTruck, m.transport.Svc.ArrayOfXElement pExceptionResponse, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[4];
                _args[0] = pDriver;
                _args[1] = pPassword;
                _args[2] = pTruck;
                _args[3] = pExceptionResponse;
                System.IAsyncResult _result = base.BeginInvoke("SendExceptionResponse", _args, callback, asyncState);
                return _result;
            }
            
            public m.transport.Svc.ArrayOfXElement EndSendExceptionResponse(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                m.transport.Svc.ArrayOfXElement _result = ((m.transport.Svc.ArrayOfXElement)(base.EndInvoke("SendExceptionResponse", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginVerifyVIN(string pDriver, string pPassword, string pTruck, string pVIN, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[4];
                _args[0] = pDriver;
                _args[1] = pPassword;
                _args[2] = pTruck;
                _args[3] = pVIN;
                System.IAsyncResult _result = base.BeginInvoke("VerifyVIN", _args, callback, asyncState);
                return _result;
            }
            
            public m.transport.Svc.ArrayOfXElement EndVerifyVIN(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                m.transport.Svc.ArrayOfXElement _result = ((m.transport.Svc.ArrayOfXElement)(base.EndInvoke("VerifyVIN", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSendDriverSignature(string pDriver, string pPassword, string pTruck, DeliverySignature signature, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[4];
                _args[0] = pDriver;
                _args[1] = pPassword;
                _args[2] = pTruck;
                _args[3] = signature;
                System.IAsyncResult _result = base.BeginInvoke("SendDriverSignature", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSendDriverSignature(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                base.EndInvoke("SendDriverSignature", _args, result);
            }
            
            public System.IAsyncResult BeginSendDamagePhotos(string pDriver, string pPassword, string pTruck, DamagePhoto[] photos, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[4];
                _args[0] = pDriver;
                _args[1] = pPassword;
                _args[2] = pTruck;
                _args[3] = photos;
                System.IAsyncResult _result = base.BeginInvoke("SendDamagePhotos", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSendDamagePhotos(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                base.EndInvoke("SendDamagePhotos", _args, result);
            }
            
			//
			public System.IAsyncResult BeginLogMobileDevice(MobileDevice device, System.AsyncCallback callback, object asyncState)
			{
				object[] _args = new object[1];
				_args[0] = device;
				System.IAsyncResult _result = base.BeginInvoke("LogMobileDevice", _args, callback, asyncState);
				return _result;
			}

			public void EndLogMobileDevice(System.IAsyncResult result)
			{
				object[] _args = new object[0];
				base.EndInvoke("LogMobileDevice", _args, result);
			}
			//

            public System.IAsyncResult BeginGetDriverSignature(m.transport.Svc.GetDriverSignatureRequest request, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetDriverSignature", _args, callback, asyncState);
                return _result;
            }
            
            public m.transport.Svc.GetDriverSignatureResponse EndGetDriverSignature(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                m.transport.Svc.GetDriverSignatureResponse _result = ((m.transport.Svc.GetDriverSignatureResponse)(base.EndInvoke("GetDriverSignature", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetLatestReleaseVersion(string appVersion, string inspectorCode, string inspectorName, string handHeldID, string localTime, string localTimeZone, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[6];
                _args[0] = appVersion;
                _args[1] = inspectorCode;
                _args[2] = inspectorName;
                _args[3] = handHeldID;
                _args[4] = localTime;
                _args[5] = localTimeZone;
                System.IAsyncResult _result = base.BeginInvoke("GetLatestReleaseVersion", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetLatestReleaseVersion(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetLatestReleaseVersion", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDownloadRelease(string appVersion, string inspectorCode, string inspectorName, string handHeldID, string localTime, string localTimeZone, string version, int currentPosition, int chunckSize, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[9];
                _args[0] = appVersion;
                _args[1] = inspectorCode;
                _args[2] = inspectorName;
                _args[3] = handHeldID;
                _args[4] = localTime;
                _args[5] = localTimeZone;
                _args[6] = version;
                _args[7] = currentPosition;
                _args[8] = chunckSize;
                System.IAsyncResult _result = base.BeginInvoke("DownloadRelease", _args, callback, asyncState);
                return _result;
            }
            
            public DAIFileDetails EndDownloadRelease(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                DAIFileDetails _result = ((DAIFileDetails)(base.EndInvoke("DownloadRelease", _args, result)));
                return _result;
            }
            
			public System.IAsyncResult BeginGetCurrentLoad(string pDriver, string pPassword, string pTruck, bool clearExceptions, string returnLoad, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[5];
                _args[0] = pDriver;
                _args[1] = pPassword;
                _args[2] = pTruck;
                _args[3] = clearExceptions;
				_args[4] = returnLoad;
                System.IAsyncResult _result = base.BeginInvoke("GetCurrentLoad", _args, callback, asyncState);
                return _result;
            }
            
            public CurrentLoadResult EndGetCurrentLoad(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                CurrentLoadResult _result = ((CurrentLoadResult)(base.EndInvoke("GetCurrentLoad", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUploadCurrentLoad(string pDriver, string pPassword, string pTruck, CurrentLoadUpdate pCurrentLoad, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[4];
                _args[0] = pDriver;
                _args[1] = pPassword;
                _args[2] = pTruck;
                _args[3] = pCurrentLoad;
                System.IAsyncResult _result = base.BeginInvoke("UploadCurrentLoad", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUploadCurrentLoad(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                base.EndInvoke("UploadCurrentLoad", _args, result);
            }
            
            public System.IAsyncResult BeginResetUser(string pDriver, string pPassword, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[2];
                _args[0] = pDriver;
                _args[1] = pPassword;
                System.IAsyncResult _result = base.BeginInvoke("ResetUser", _args, callback, asyncState);
                return _result;
            }
            
            public void EndResetUser(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                base.EndInvoke("ResetUser", _args, result);
            }
            
            public System.IAsyncResult BeginGetMobileSettings(System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetMobileSettings", _args, callback, asyncState);
                return _result;
            }
            
            public MobileSettingsResult EndGetMobileSettings(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                MobileSettingsResult _result = ((MobileSettingsResult)(base.EndInvoke("GetMobileSettings", _args, result)));
                return _result;
            }
        }
    }
    
    [System.Xml.Serialization.XmlSchemaProviderAttribute(null, IsAny=true)]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("SlSvcUtil", "3.7.0.0")]
    public partial class ArrayOfXElement : object, System.Xml.Serialization.IXmlSerializable
    {
        
        private System.Collections.Generic.List<System.Xml.Linq.XElement> nodesList = new System.Collections.Generic.List<System.Xml.Linq.XElement>();
        
        public ArrayOfXElement()
        {
        }
        
        public virtual System.Collections.Generic.List<System.Xml.Linq.XElement> Nodes
        {
            get
            {
                return this.nodesList;
            }
        }
        
        public virtual System.Xml.Schema.XmlSchema GetSchema()
        {
            throw new System.NotImplementedException();
        }
        
        public virtual void WriteXml(System.Xml.XmlWriter writer)
        {
            System.Collections.Generic.IEnumerator<System.Xml.Linq.XElement> e = nodesList.GetEnumerator();
            for (
            ; e.MoveNext(); 
            )
            {
                ((System.Xml.Serialization.IXmlSerializable)(e.Current)).WriteXml(writer);
            }
        }
        
        public virtual void ReadXml(System.Xml.XmlReader reader)
        {
            for (
            ; (reader.NodeType != System.Xml.XmlNodeType.EndElement); 
            )
            {
                if ((reader.NodeType == System.Xml.XmlNodeType.Element))
                {
                    System.Xml.Linq.XElement elem = new System.Xml.Linq.XElement("default");
                    ((System.Xml.Serialization.IXmlSerializable)(elem)).ReadXml(reader);
                    Nodes.Add(elem);
                }
                else
                {
                    reader.Skip();
                }
            }
        }
    }
}
